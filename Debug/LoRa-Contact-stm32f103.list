
LoRa-Contact-stm32f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000219c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080022a8  080022a8  000122a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800237c  0800237c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800237c  0800237c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800237c  0800237c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800237c  0800237c  0001237c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002380  08002380  00012380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000070  080023f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  080023f4  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000071a2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018c6  00000000  00000000  0002723b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  00028b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000780  00000000  00000000  00029340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a23  00000000  00000000  00029ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096f5  00000000  00000000  000414e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084a4b  00000000  00000000  0004abd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf623  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023d4  00000000  00000000  000cf674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002290 	.word	0x08002290

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002290 	.word	0x08002290

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000170:	4b32      	ldr	r3, [pc, #200]	; (800023c <MX_GPIO_Init+0xe0>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a31      	ldr	r2, [pc, #196]	; (800023c <MX_GPIO_Init+0xe0>)
 8000176:	f043 0320 	orr.w	r3, r3, #32
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b2f      	ldr	r3, [pc, #188]	; (800023c <MX_GPIO_Init+0xe0>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0320 	and.w	r3, r3, #32
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000188:	4b2c      	ldr	r3, [pc, #176]	; (800023c <MX_GPIO_Init+0xe0>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a2b      	ldr	r2, [pc, #172]	; (800023c <MX_GPIO_Init+0xe0>)
 800018e:	f043 0304 	orr.w	r3, r3, #4
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b29      	ldr	r3, [pc, #164]	; (800023c <MX_GPIO_Init+0xe0>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0304 	and.w	r3, r3, #4
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a0:	4b26      	ldr	r3, [pc, #152]	; (800023c <MX_GPIO_Init+0xe0>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a25      	ldr	r2, [pc, #148]	; (800023c <MX_GPIO_Init+0xe0>)
 80001a6:	f043 0308 	orr.w	r3, r3, #8
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b23      	ldr	r3, [pc, #140]	; (800023c <MX_GPIO_Init+0xe0>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0308 	and.w	r3, r3, #8
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80001b8:	2200      	movs	r2, #0
 80001ba:	2102      	movs	r1, #2
 80001bc:	4820      	ldr	r0, [pc, #128]	; (8000240 <MX_GPIO_Init+0xe4>)
 80001be:	f000 fd4d 	bl	8000c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 80001c2:	2201      	movs	r2, #1
 80001c4:	2110      	movs	r1, #16
 80001c6:	481e      	ldr	r0, [pc, #120]	; (8000240 <MX_GPIO_Init+0xe4>)
 80001c8:	f000 fd48 	bl	8000c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	2101      	movs	r1, #1
 80001d0:	481c      	ldr	r0, [pc, #112]	; (8000244 <MX_GPIO_Init+0xe8>)
 80001d2:	f000 fd43 	bl	8000c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 80001d6:	2201      	movs	r2, #1
 80001d8:	2102      	movs	r1, #2
 80001da:	481a      	ldr	r0, [pc, #104]	; (8000244 <MX_GPIO_Init+0xe8>)
 80001dc:	f000 fd3e 	bl	8000c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED2_Pin|NSS_Pin;
 80001e0:	2312      	movs	r3, #18
 80001e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e4:	2301      	movs	r3, #1
 80001e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e8:	2300      	movs	r3, #0
 80001ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ec:	2302      	movs	r3, #2
 80001ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001f0:	f107 0310 	add.w	r3, r7, #16
 80001f4:	4619      	mov	r1, r3
 80001f6:	4812      	ldr	r0, [pc, #72]	; (8000240 <MX_GPIO_Init+0xe4>)
 80001f8:	f000 fbac 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|RESET_Pin;
 80001fc:	2303      	movs	r3, #3
 80001fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000200:	2301      	movs	r3, #1
 8000202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000204:	2300      	movs	r3, #0
 8000206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000208:	2302      	movs	r3, #2
 800020a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800020c:	f107 0310 	add.w	r3, r7, #16
 8000210:	4619      	mov	r1, r3
 8000212:	480c      	ldr	r0, [pc, #48]	; (8000244 <MX_GPIO_Init+0xe8>)
 8000214:	f000 fb9e 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800021c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800021e:	2300      	movs	r3, #0
 8000220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000222:	2301      	movs	r3, #1
 8000224:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000226:	f107 0310 	add.w	r3, r7, #16
 800022a:	4619      	mov	r1, r3
 800022c:	4804      	ldr	r0, [pc, #16]	; (8000240 <MX_GPIO_Init+0xe4>)
 800022e:	f000 fb91 	bl	8000954 <HAL_GPIO_Init>

}
 8000232:	bf00      	nop
 8000234:	3720      	adds	r7, #32
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	40021000 	.word	0x40021000
 8000240:	40010800 	.word	0x40010800
 8000244:	40010c00 	.word	0x40010c00

08000248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b086      	sub	sp, #24
 800024c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024e:	f000 fa3b 	bl	80006c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000252:	f000 f83d 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000256:	f7ff ff81 	bl	800015c <MX_GPIO_Init>
  MX_SPI1_Init();
 800025a:	f000 f883 	bl	8000364 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800025e:	f000 f997 	bl	8000590 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	int soft_version_arr_int[3];
	soft_version_arr_int[0] = ((SOFT_VERSION) / 100)     ;
 8000262:	2302      	movs	r3, #2
 8000264:	607b      	str	r3, [r7, #4]
	soft_version_arr_int[1] = ((SOFT_VERSION) /  10) %10 ;
 8000266:	2300      	movs	r3, #0
 8000268:	60bb      	str	r3, [r7, #8]
	soft_version_arr_int[2] = ((SOFT_VERSION)      ) %10 ;
 800026a:	2300      	movs	r3, #0
 800026c:	60fb      	str	r3, [r7, #12]

	sprintf(DataChar,"\r\n\r\n\tLoRa over sx1278 v%d.%d.%d \r\nUART1 for debug on speed 115200 \r\n",
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	68b9      	ldr	r1, [r7, #8]
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	9300      	str	r3, [sp, #0]
 8000276:	460b      	mov	r3, r1
 8000278:	490f      	ldr	r1, [pc, #60]	; (80002b8 <main+0x70>)
 800027a:	4810      	ldr	r0, [pc, #64]	; (80002bc <main+0x74>)
 800027c:	f001 fb9c 	bl	80019b8 <siprintf>
			soft_version_arr_int[0] ,
			soft_version_arr_int[1] ,
			soft_version_arr_int[2] ) ;
	HAL_UART_Transmit(&huart1, (uint8_t *)DataChar, strlen(DataChar), 100);
 8000280:	480e      	ldr	r0, [pc, #56]	; (80002bc <main+0x74>)
 8000282:	f7ff ff63 	bl	800014c <strlen>
 8000286:	4603      	mov	r3, r0
 8000288:	b29a      	uxth	r2, r3
 800028a:	2364      	movs	r3, #100	; 0x64
 800028c:	490b      	ldr	r1, [pc, #44]	; (80002bc <main+0x74>)
 800028e:	480c      	ldr	r0, [pc, #48]	; (80002c0 <main+0x78>)
 8000290:	f001 f9e7 	bl	8001662 <HAL_UART_Transmit>
	#define 	DATE_as_int_str 	(__DATE__)
	#define 	TIME_as_int_str 	(__TIME__)
	sprintf(DataChar,"Build: %s. Time: %s.\r\n" ,
 8000294:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <main+0x7c>)
 8000296:	4a0c      	ldr	r2, [pc, #48]	; (80002c8 <main+0x80>)
 8000298:	490c      	ldr	r1, [pc, #48]	; (80002cc <main+0x84>)
 800029a:	4808      	ldr	r0, [pc, #32]	; (80002bc <main+0x74>)
 800029c:	f001 fb8c 	bl	80019b8 <siprintf>
			DATE_as_int_str ,
			TIME_as_int_str ) ;
	HAL_UART_Transmit( &huart1, (uint8_t *)DataChar , strlen(DataChar) , 100 ) ;
 80002a0:	4806      	ldr	r0, [pc, #24]	; (80002bc <main+0x74>)
 80002a2:	f7ff ff53 	bl	800014c <strlen>
 80002a6:	4603      	mov	r3, r0
 80002a8:	b29a      	uxth	r2, r3
 80002aa:	2364      	movs	r3, #100	; 0x64
 80002ac:	4903      	ldr	r1, [pc, #12]	; (80002bc <main+0x74>)
 80002ae:	4804      	ldr	r0, [pc, #16]	; (80002c0 <main+0x78>)
 80002b0:	f001 f9d7 	bl	8001662 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b4:	e7fe      	b.n	80002b4 <main+0x6c>
 80002b6:	bf00      	nop
 80002b8:	080022a8 	.word	0x080022a8
 80002bc:	2000008c 	.word	0x2000008c
 80002c0:	200001e8 	.word	0x200001e8
 80002c4:	080022f0 	.word	0x080022f0
 80002c8:	080022fc 	.word	0x080022fc
 80002cc:	08002308 	.word	0x08002308

080002d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b090      	sub	sp, #64	; 0x40
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	f107 0318 	add.w	r3, r7, #24
 80002da:	2228      	movs	r2, #40	; 0x28
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f001 fb62 	bl	80019a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
 80002f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f2:	2301      	movs	r3, #1
 80002f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000300:	2301      	movs	r3, #1
 8000302:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000304:	2302      	movs	r3, #2
 8000306:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800030c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800030e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000312:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000314:	f107 0318 	add.w	r3, r7, #24
 8000318:	4618      	mov	r0, r3
 800031a:	f000 fcb7 	bl	8000c8c <HAL_RCC_OscConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000324:	f000 f819 	bl	800035a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000328:	230f      	movs	r3, #15
 800032a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032c:	2302      	movs	r3, #2
 800032e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000338:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	2102      	movs	r1, #2
 8000342:	4618      	mov	r0, r3
 8000344:	f000 ff24 	bl	8001190 <HAL_RCC_ClockConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800034e:	f000 f804 	bl	800035a <Error_Handler>
  }
}
 8000352:	bf00      	nop
 8000354:	3740      	adds	r7, #64	; 0x40
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}

0800035a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800035e:	b672      	cpsid	i
}
 8000360:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000362:	e7fe      	b.n	8000362 <Error_Handler+0x8>

08000364 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000368:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <MX_SPI1_Init+0x64>)
 800036a:	4a18      	ldr	r2, [pc, #96]	; (80003cc <MX_SPI1_Init+0x68>)
 800036c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800036e:	4b16      	ldr	r3, [pc, #88]	; (80003c8 <MX_SPI1_Init+0x64>)
 8000370:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000374:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000376:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <MX_SPI1_Init+0x64>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800037c:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <MX_SPI1_Init+0x64>)
 800037e:	2200      	movs	r2, #0
 8000380:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000382:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <MX_SPI1_Init+0x64>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000388:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <MX_SPI1_Init+0x64>)
 800038a:	2200      	movs	r2, #0
 800038c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <MX_SPI1_Init+0x64>)
 8000390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000394:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <MX_SPI1_Init+0x64>)
 8000398:	2210      	movs	r2, #16
 800039a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800039c:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <MX_SPI1_Init+0x64>)
 800039e:	2200      	movs	r2, #0
 80003a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <MX_SPI1_Init+0x64>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003a8:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <MX_SPI1_Init+0x64>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003ae:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <MX_SPI1_Init+0x64>)
 80003b0:	220a      	movs	r2, #10
 80003b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003b4:	4804      	ldr	r0, [pc, #16]	; (80003c8 <MX_SPI1_Init+0x64>)
 80003b6:	f001 f883 	bl	80014c0 <HAL_SPI_Init>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003c0:	f7ff ffcb 	bl	800035a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	2000018c 	.word	0x2000018c
 80003cc:	40013000 	.word	0x40013000

080003d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b088      	sub	sp, #32
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d8:	f107 0310 	add.w	r3, r7, #16
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]
 80003e4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a1b      	ldr	r2, [pc, #108]	; (8000458 <HAL_SPI_MspInit+0x88>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d12f      	bne.n	8000450 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80003f0:	4b1a      	ldr	r3, [pc, #104]	; (800045c <HAL_SPI_MspInit+0x8c>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a19      	ldr	r2, [pc, #100]	; (800045c <HAL_SPI_MspInit+0x8c>)
 80003f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b17      	ldr	r3, [pc, #92]	; (800045c <HAL_SPI_MspInit+0x8c>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000404:	60fb      	str	r3, [r7, #12]
 8000406:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000408:	4b14      	ldr	r3, [pc, #80]	; (800045c <HAL_SPI_MspInit+0x8c>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a13      	ldr	r2, [pc, #76]	; (800045c <HAL_SPI_MspInit+0x8c>)
 800040e:	f043 0304 	orr.w	r3, r3, #4
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b11      	ldr	r3, [pc, #68]	; (800045c <HAL_SPI_MspInit+0x8c>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0304 	and.w	r3, r3, #4
 800041c:	60bb      	str	r3, [r7, #8]
 800041e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000420:	23a0      	movs	r3, #160	; 0xa0
 8000422:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000424:	2302      	movs	r3, #2
 8000426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000428:	2303      	movs	r3, #3
 800042a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042c:	f107 0310 	add.w	r3, r7, #16
 8000430:	4619      	mov	r1, r3
 8000432:	480b      	ldr	r0, [pc, #44]	; (8000460 <HAL_SPI_MspInit+0x90>)
 8000434:	f000 fa8e 	bl	8000954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000438:	2340      	movs	r3, #64	; 0x40
 800043a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000440:	2300      	movs	r3, #0
 8000442:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	4619      	mov	r1, r3
 800044a:	4805      	ldr	r0, [pc, #20]	; (8000460 <HAL_SPI_MspInit+0x90>)
 800044c:	f000 fa82 	bl	8000954 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000450:	bf00      	nop
 8000452:	3720      	adds	r7, #32
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40013000 	.word	0x40013000
 800045c:	40021000 	.word	0x40021000
 8000460:	40010800 	.word	0x40010800

08000464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800046a:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <HAL_MspInit+0x5c>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	4a14      	ldr	r2, [pc, #80]	; (80004c0 <HAL_MspInit+0x5c>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	6193      	str	r3, [r2, #24]
 8000476:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <HAL_MspInit+0x5c>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	f003 0301 	and.w	r3, r3, #1
 800047e:	60bb      	str	r3, [r7, #8]
 8000480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000482:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <HAL_MspInit+0x5c>)
 8000484:	69db      	ldr	r3, [r3, #28]
 8000486:	4a0e      	ldr	r2, [pc, #56]	; (80004c0 <HAL_MspInit+0x5c>)
 8000488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800048c:	61d3      	str	r3, [r2, #28]
 800048e:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <HAL_MspInit+0x5c>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800049a:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <HAL_MspInit+0x60>)
 800049c:	685b      	ldr	r3, [r3, #4]
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	4a04      	ldr	r2, [pc, #16]	; (80004c4 <HAL_MspInit+0x60>)
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b6:	bf00      	nop
 80004b8:	3714      	adds	r7, #20
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	40021000 	.word	0x40021000
 80004c4:	40010000 	.word	0x40010000

080004c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004cc:	e7fe      	b.n	80004cc <NMI_Handler+0x4>

080004ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d2:	e7fe      	b.n	80004d2 <HardFault_Handler+0x4>

080004d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <MemManage_Handler+0x4>

080004da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004de:	e7fe      	b.n	80004de <BusFault_Handler+0x4>

080004e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <UsageFault_Handler+0x4>

080004e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr

080004f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr

080004fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr

0800050a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800050e:	f000 f921 	bl	8000754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000520:	4a14      	ldr	r2, [pc, #80]	; (8000574 <_sbrk+0x5c>)
 8000522:	4b15      	ldr	r3, [pc, #84]	; (8000578 <_sbrk+0x60>)
 8000524:	1ad3      	subs	r3, r2, r3
 8000526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800052c:	4b13      	ldr	r3, [pc, #76]	; (800057c <_sbrk+0x64>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d102      	bne.n	800053a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <_sbrk+0x64>)
 8000536:	4a12      	ldr	r2, [pc, #72]	; (8000580 <_sbrk+0x68>)
 8000538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <_sbrk+0x64>)
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4413      	add	r3, r2
 8000542:	693a      	ldr	r2, [r7, #16]
 8000544:	429a      	cmp	r2, r3
 8000546:	d207      	bcs.n	8000558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000548:	f001 f9f6 	bl	8001938 <__errno>
 800054c:	4603      	mov	r3, r0
 800054e:	220c      	movs	r2, #12
 8000550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000552:	f04f 33ff 	mov.w	r3, #4294967295
 8000556:	e009      	b.n	800056c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000558:	4b08      	ldr	r3, [pc, #32]	; (800057c <_sbrk+0x64>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800055e:	4b07      	ldr	r3, [pc, #28]	; (800057c <_sbrk+0x64>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4413      	add	r3, r2
 8000566:	4a05      	ldr	r2, [pc, #20]	; (800057c <_sbrk+0x64>)
 8000568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800056a:	68fb      	ldr	r3, [r7, #12]
}
 800056c:	4618      	mov	r0, r3
 800056e:	3718      	adds	r7, #24
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20005000 	.word	0x20005000
 8000578:	00000400 	.word	0x00000400
 800057c:	200001e4 	.word	0x200001e4
 8000580:	20000240 	.word	0x20000240

08000584 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000594:	4b11      	ldr	r3, [pc, #68]	; (80005dc <MX_USART1_UART_Init+0x4c>)
 8000596:	4a12      	ldr	r2, [pc, #72]	; (80005e0 <MX_USART1_UART_Init+0x50>)
 8000598:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800059a:	4b10      	ldr	r3, [pc, #64]	; (80005dc <MX_USART1_UART_Init+0x4c>)
 800059c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <MX_USART1_UART_Init+0x4c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <MX_USART1_UART_Init+0x4c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <MX_USART1_UART_Init+0x4c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <MX_USART1_UART_Init+0x4c>)
 80005b6:	220c      	movs	r2, #12
 80005b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <MX_USART1_UART_Init+0x4c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MX_USART1_UART_Init+0x4c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <MX_USART1_UART_Init+0x4c>)
 80005c8:	f000 fffe 	bl	80015c8 <HAL_UART_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005d2:	f7ff fec2 	bl	800035a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200001e8 	.word	0x200001e8
 80005e0:	40013800 	.word	0x40013800

080005e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a1c      	ldr	r2, [pc, #112]	; (8000670 <HAL_UART_MspInit+0x8c>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d131      	bne.n	8000668 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <HAL_UART_MspInit+0x90>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a1a      	ldr	r2, [pc, #104]	; (8000674 <HAL_UART_MspInit+0x90>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <HAL_UART_MspInit+0x90>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <HAL_UART_MspInit+0x90>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a14      	ldr	r2, [pc, #80]	; (8000674 <HAL_UART_MspInit+0x90>)
 8000622:	f043 0304 	orr.w	r3, r3, #4
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <HAL_UART_MspInit+0x90>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0304 	and.w	r3, r3, #4
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000638:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063a:	2302      	movs	r3, #2
 800063c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063e:	2303      	movs	r3, #3
 8000640:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000642:	f107 0310 	add.w	r3, r7, #16
 8000646:	4619      	mov	r1, r3
 8000648:	480b      	ldr	r0, [pc, #44]	; (8000678 <HAL_UART_MspInit+0x94>)
 800064a:	f000 f983 	bl	8000954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800064e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000652:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	4619      	mov	r1, r3
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <HAL_UART_MspInit+0x94>)
 8000664:	f000 f976 	bl	8000954 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000668:	bf00      	nop
 800066a:	3720      	adds	r7, #32
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40013800 	.word	0x40013800
 8000674:	40021000 	.word	0x40021000
 8000678:	40010800 	.word	0x40010800

0800067c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800067c:	480c      	ldr	r0, [pc, #48]	; (80006b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800067e:	490d      	ldr	r1, [pc, #52]	; (80006b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000680:	4a0d      	ldr	r2, [pc, #52]	; (80006b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000684:	e002      	b.n	800068c <LoopCopyDataInit>

08000686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068a:	3304      	adds	r3, #4

0800068c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800068c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000690:	d3f9      	bcc.n	8000686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000692:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000694:	4c0a      	ldr	r4, [pc, #40]	; (80006c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000698:	e001      	b.n	800069e <LoopFillZerobss>

0800069a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800069c:	3204      	adds	r2, #4

0800069e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a0:	d3fb      	bcc.n	800069a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006a2:	f7ff ff6f 	bl	8000584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006a6:	f001 f94d 	bl	8001944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006aa:	f7ff fdcd 	bl	8000248 <main>
  bx lr
 80006ae:	4770      	bx	lr
  ldr r0, =_sdata
 80006b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006b8:	08002384 	.word	0x08002384
  ldr r2, =_sbss
 80006bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006c0:	20000240 	.word	0x20000240

080006c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c4:	e7fe      	b.n	80006c4 <ADC1_2_IRQHandler>
	...

080006c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <HAL_Init+0x28>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <HAL_Init+0x28>)
 80006d2:	f043 0310 	orr.w	r3, r3, #16
 80006d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d8:	2003      	movs	r0, #3
 80006da:	f000 f907 	bl	80008ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006de:	200f      	movs	r0, #15
 80006e0:	f000 f808 	bl	80006f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006e4:	f7ff febe 	bl	8000464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40022000 	.word	0x40022000

080006f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_InitTick+0x54>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <HAL_InitTick+0x58>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4619      	mov	r1, r3
 8000706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070a:	fbb3 f3f1 	udiv	r3, r3, r1
 800070e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f000 f911 	bl	800093a <HAL_SYSTICK_Config>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800071e:	2301      	movs	r3, #1
 8000720:	e00e      	b.n	8000740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2b0f      	cmp	r3, #15
 8000726:	d80a      	bhi.n	800073e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000728:	2200      	movs	r2, #0
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	f04f 30ff 	mov.w	r0, #4294967295
 8000730:	f000 f8e7 	bl	8000902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000734:	4a06      	ldr	r2, [pc, #24]	; (8000750 <HAL_InitTick+0x5c>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800073a:	2300      	movs	r3, #0
 800073c:	e000      	b.n	8000740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000000 	.word	0x20000000
 800074c:	20000008 	.word	0x20000008
 8000750:	20000004 	.word	0x20000004

08000754 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HAL_IncTick+0x1c>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_IncTick+0x20>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4413      	add	r3, r2
 8000764:	4a03      	ldr	r2, [pc, #12]	; (8000774 <HAL_IncTick+0x20>)
 8000766:	6013      	str	r3, [r2, #0]
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	20000008 	.word	0x20000008
 8000774:	2000022c 	.word	0x2000022c

08000778 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  return uwTick;
 800077c:	4b02      	ldr	r3, [pc, #8]	; (8000788 <HAL_GetTick+0x10>)
 800077e:	681b      	ldr	r3, [r3, #0]
}
 8000780:	4618      	mov	r0, r3
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	2000022c 	.word	0x2000022c

0800078c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <__NVIC_SetPriorityGrouping+0x44>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007a8:	4013      	ands	r3, r2
 80007aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007be:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <__NVIC_SetPriorityGrouping+0x44>)
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	60d3      	str	r3, [r2, #12]
}
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <__NVIC_GetPriorityGrouping+0x18>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	0a1b      	lsrs	r3, r3, #8
 80007de:	f003 0307 	and.w	r3, r3, #7
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000800:	2b00      	cmp	r3, #0
 8000802:	db0a      	blt.n	800081a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	b2da      	uxtb	r2, r3
 8000808:	490c      	ldr	r1, [pc, #48]	; (800083c <__NVIC_SetPriority+0x4c>)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	0112      	lsls	r2, r2, #4
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	440b      	add	r3, r1
 8000814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000818:	e00a      	b.n	8000830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4908      	ldr	r1, [pc, #32]	; (8000840 <__NVIC_SetPriority+0x50>)
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	f003 030f 	and.w	r3, r3, #15
 8000826:	3b04      	subs	r3, #4
 8000828:	0112      	lsls	r2, r2, #4
 800082a:	b2d2      	uxtb	r2, r2
 800082c:	440b      	add	r3, r1
 800082e:	761a      	strb	r2, [r3, #24]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000e100 	.word	0xe000e100
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000844:	b480      	push	{r7}
 8000846:	b089      	sub	sp, #36	; 0x24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	f1c3 0307 	rsb	r3, r3, #7
 800085e:	2b04      	cmp	r3, #4
 8000860:	bf28      	it	cs
 8000862:	2304      	movcs	r3, #4
 8000864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	3304      	adds	r3, #4
 800086a:	2b06      	cmp	r3, #6
 800086c:	d902      	bls.n	8000874 <NVIC_EncodePriority+0x30>
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3b03      	subs	r3, #3
 8000872:	e000      	b.n	8000876 <NVIC_EncodePriority+0x32>
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000878:	f04f 32ff 	mov.w	r2, #4294967295
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43da      	mvns	r2, r3
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	401a      	ands	r2, r3
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800088c:	f04f 31ff 	mov.w	r1, #4294967295
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	fa01 f303 	lsl.w	r3, r1, r3
 8000896:	43d9      	mvns	r1, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	4313      	orrs	r3, r2
         );
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3724      	adds	r7, #36	; 0x24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008b8:	d301      	bcc.n	80008be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ba:	2301      	movs	r3, #1
 80008bc:	e00f      	b.n	80008de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <SysTick_Config+0x40>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008c6:	210f      	movs	r1, #15
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	f7ff ff90 	bl	80007f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <SysTick_Config+0x40>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008d6:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <SysTick_Config+0x40>)
 80008d8:	2207      	movs	r2, #7
 80008da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	e000e010 	.word	0xe000e010

080008ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff ff49 	bl	800078c <__NVIC_SetPriorityGrouping>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000902:	b580      	push	{r7, lr}
 8000904:	b086      	sub	sp, #24
 8000906:	af00      	add	r7, sp, #0
 8000908:	4603      	mov	r3, r0
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
 800090e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000914:	f7ff ff5e 	bl	80007d4 <__NVIC_GetPriorityGrouping>
 8000918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	68b9      	ldr	r1, [r7, #8]
 800091e:	6978      	ldr	r0, [r7, #20]
 8000920:	f7ff ff90 	bl	8000844 <NVIC_EncodePriority>
 8000924:	4602      	mov	r2, r0
 8000926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff5f 	bl	80007f0 <__NVIC_SetPriority>
}
 8000932:	bf00      	nop
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff ffb0 	bl	80008a8 <SysTick_Config>
 8000948:	4603      	mov	r3, r0
}
 800094a:	4618      	mov	r0, r3
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000954:	b480      	push	{r7}
 8000956:	b08b      	sub	sp, #44	; 0x2c
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000966:	e169      	b.n	8000c3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000968:	2201      	movs	r2, #1
 800096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	69fa      	ldr	r2, [r7, #28]
 8000978:	4013      	ands	r3, r2
 800097a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	429a      	cmp	r2, r3
 8000982:	f040 8158 	bne.w	8000c36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	4a9a      	ldr	r2, [pc, #616]	; (8000bf4 <HAL_GPIO_Init+0x2a0>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d05e      	beq.n	8000a4e <HAL_GPIO_Init+0xfa>
 8000990:	4a98      	ldr	r2, [pc, #608]	; (8000bf4 <HAL_GPIO_Init+0x2a0>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d875      	bhi.n	8000a82 <HAL_GPIO_Init+0x12e>
 8000996:	4a98      	ldr	r2, [pc, #608]	; (8000bf8 <HAL_GPIO_Init+0x2a4>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d058      	beq.n	8000a4e <HAL_GPIO_Init+0xfa>
 800099c:	4a96      	ldr	r2, [pc, #600]	; (8000bf8 <HAL_GPIO_Init+0x2a4>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d86f      	bhi.n	8000a82 <HAL_GPIO_Init+0x12e>
 80009a2:	4a96      	ldr	r2, [pc, #600]	; (8000bfc <HAL_GPIO_Init+0x2a8>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d052      	beq.n	8000a4e <HAL_GPIO_Init+0xfa>
 80009a8:	4a94      	ldr	r2, [pc, #592]	; (8000bfc <HAL_GPIO_Init+0x2a8>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d869      	bhi.n	8000a82 <HAL_GPIO_Init+0x12e>
 80009ae:	4a94      	ldr	r2, [pc, #592]	; (8000c00 <HAL_GPIO_Init+0x2ac>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d04c      	beq.n	8000a4e <HAL_GPIO_Init+0xfa>
 80009b4:	4a92      	ldr	r2, [pc, #584]	; (8000c00 <HAL_GPIO_Init+0x2ac>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d863      	bhi.n	8000a82 <HAL_GPIO_Init+0x12e>
 80009ba:	4a92      	ldr	r2, [pc, #584]	; (8000c04 <HAL_GPIO_Init+0x2b0>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d046      	beq.n	8000a4e <HAL_GPIO_Init+0xfa>
 80009c0:	4a90      	ldr	r2, [pc, #576]	; (8000c04 <HAL_GPIO_Init+0x2b0>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d85d      	bhi.n	8000a82 <HAL_GPIO_Init+0x12e>
 80009c6:	2b12      	cmp	r3, #18
 80009c8:	d82a      	bhi.n	8000a20 <HAL_GPIO_Init+0xcc>
 80009ca:	2b12      	cmp	r3, #18
 80009cc:	d859      	bhi.n	8000a82 <HAL_GPIO_Init+0x12e>
 80009ce:	a201      	add	r2, pc, #4	; (adr r2, 80009d4 <HAL_GPIO_Init+0x80>)
 80009d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d4:	08000a4f 	.word	0x08000a4f
 80009d8:	08000a29 	.word	0x08000a29
 80009dc:	08000a3b 	.word	0x08000a3b
 80009e0:	08000a7d 	.word	0x08000a7d
 80009e4:	08000a83 	.word	0x08000a83
 80009e8:	08000a83 	.word	0x08000a83
 80009ec:	08000a83 	.word	0x08000a83
 80009f0:	08000a83 	.word	0x08000a83
 80009f4:	08000a83 	.word	0x08000a83
 80009f8:	08000a83 	.word	0x08000a83
 80009fc:	08000a83 	.word	0x08000a83
 8000a00:	08000a83 	.word	0x08000a83
 8000a04:	08000a83 	.word	0x08000a83
 8000a08:	08000a83 	.word	0x08000a83
 8000a0c:	08000a83 	.word	0x08000a83
 8000a10:	08000a83 	.word	0x08000a83
 8000a14:	08000a83 	.word	0x08000a83
 8000a18:	08000a31 	.word	0x08000a31
 8000a1c:	08000a45 	.word	0x08000a45
 8000a20:	4a79      	ldr	r2, [pc, #484]	; (8000c08 <HAL_GPIO_Init+0x2b4>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d013      	beq.n	8000a4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a26:	e02c      	b.n	8000a82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	623b      	str	r3, [r7, #32]
          break;
 8000a2e:	e029      	b.n	8000a84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	3304      	adds	r3, #4
 8000a36:	623b      	str	r3, [r7, #32]
          break;
 8000a38:	e024      	b.n	8000a84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	3308      	adds	r3, #8
 8000a40:	623b      	str	r3, [r7, #32]
          break;
 8000a42:	e01f      	b.n	8000a84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	330c      	adds	r3, #12
 8000a4a:	623b      	str	r3, [r7, #32]
          break;
 8000a4c:	e01a      	b.n	8000a84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d102      	bne.n	8000a5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a56:	2304      	movs	r3, #4
 8000a58:	623b      	str	r3, [r7, #32]
          break;
 8000a5a:	e013      	b.n	8000a84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d105      	bne.n	8000a70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a64:	2308      	movs	r3, #8
 8000a66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	69fa      	ldr	r2, [r7, #28]
 8000a6c:	611a      	str	r2, [r3, #16]
          break;
 8000a6e:	e009      	b.n	8000a84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a70:	2308      	movs	r3, #8
 8000a72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	69fa      	ldr	r2, [r7, #28]
 8000a78:	615a      	str	r2, [r3, #20]
          break;
 8000a7a:	e003      	b.n	8000a84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
          break;
 8000a80:	e000      	b.n	8000a84 <HAL_GPIO_Init+0x130>
          break;
 8000a82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	2bff      	cmp	r3, #255	; 0xff
 8000a88:	d801      	bhi.n	8000a8e <HAL_GPIO_Init+0x13a>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	e001      	b.n	8000a92 <HAL_GPIO_Init+0x13e>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	3304      	adds	r3, #4
 8000a92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	2bff      	cmp	r3, #255	; 0xff
 8000a98:	d802      	bhi.n	8000aa0 <HAL_GPIO_Init+0x14c>
 8000a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	e002      	b.n	8000aa6 <HAL_GPIO_Init+0x152>
 8000aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa2:	3b08      	subs	r3, #8
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	210f      	movs	r1, #15
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	6a39      	ldr	r1, [r7, #32]
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac0:	431a      	orrs	r2, r3
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f000 80b1 	beq.w	8000c36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ad4:	4b4d      	ldr	r3, [pc, #308]	; (8000c0c <HAL_GPIO_Init+0x2b8>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a4c      	ldr	r2, [pc, #304]	; (8000c0c <HAL_GPIO_Init+0x2b8>)
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b4a      	ldr	r3, [pc, #296]	; (8000c0c <HAL_GPIO_Init+0x2b8>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000aec:	4a48      	ldr	r2, [pc, #288]	; (8000c10 <HAL_GPIO_Init+0x2bc>)
 8000aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af0:	089b      	lsrs	r3, r3, #2
 8000af2:	3302      	adds	r3, #2
 8000af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	f003 0303 	and.w	r3, r3, #3
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	220f      	movs	r2, #15
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a40      	ldr	r2, [pc, #256]	; (8000c14 <HAL_GPIO_Init+0x2c0>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d013      	beq.n	8000b40 <HAL_GPIO_Init+0x1ec>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a3f      	ldr	r2, [pc, #252]	; (8000c18 <HAL_GPIO_Init+0x2c4>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d00d      	beq.n	8000b3c <HAL_GPIO_Init+0x1e8>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a3e      	ldr	r2, [pc, #248]	; (8000c1c <HAL_GPIO_Init+0x2c8>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d007      	beq.n	8000b38 <HAL_GPIO_Init+0x1e4>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a3d      	ldr	r2, [pc, #244]	; (8000c20 <HAL_GPIO_Init+0x2cc>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d101      	bne.n	8000b34 <HAL_GPIO_Init+0x1e0>
 8000b30:	2303      	movs	r3, #3
 8000b32:	e006      	b.n	8000b42 <HAL_GPIO_Init+0x1ee>
 8000b34:	2304      	movs	r3, #4
 8000b36:	e004      	b.n	8000b42 <HAL_GPIO_Init+0x1ee>
 8000b38:	2302      	movs	r3, #2
 8000b3a:	e002      	b.n	8000b42 <HAL_GPIO_Init+0x1ee>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	e000      	b.n	8000b42 <HAL_GPIO_Init+0x1ee>
 8000b40:	2300      	movs	r3, #0
 8000b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b44:	f002 0203 	and.w	r2, r2, #3
 8000b48:	0092      	lsls	r2, r2, #2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b52:	492f      	ldr	r1, [pc, #188]	; (8000c10 <HAL_GPIO_Init+0x2bc>)
 8000b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b56:	089b      	lsrs	r3, r3, #2
 8000b58:	3302      	adds	r3, #2
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d006      	beq.n	8000b7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b6c:	4b2d      	ldr	r3, [pc, #180]	; (8000c24 <HAL_GPIO_Init+0x2d0>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	492c      	ldr	r1, [pc, #176]	; (8000c24 <HAL_GPIO_Init+0x2d0>)
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	600b      	str	r3, [r1, #0]
 8000b78:	e006      	b.n	8000b88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b7a:	4b2a      	ldr	r3, [pc, #168]	; (8000c24 <HAL_GPIO_Init+0x2d0>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	43db      	mvns	r3, r3
 8000b82:	4928      	ldr	r1, [pc, #160]	; (8000c24 <HAL_GPIO_Init+0x2d0>)
 8000b84:	4013      	ands	r3, r2
 8000b86:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d006      	beq.n	8000ba2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b94:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <HAL_GPIO_Init+0x2d0>)
 8000b96:	685a      	ldr	r2, [r3, #4]
 8000b98:	4922      	ldr	r1, [pc, #136]	; (8000c24 <HAL_GPIO_Init+0x2d0>)
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	604b      	str	r3, [r1, #4]
 8000ba0:	e006      	b.n	8000bb0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ba2:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <HAL_GPIO_Init+0x2d0>)
 8000ba4:	685a      	ldr	r2, [r3, #4]
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	491e      	ldr	r1, [pc, #120]	; (8000c24 <HAL_GPIO_Init+0x2d0>)
 8000bac:	4013      	ands	r3, r2
 8000bae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d006      	beq.n	8000bca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <HAL_GPIO_Init+0x2d0>)
 8000bbe:	689a      	ldr	r2, [r3, #8]
 8000bc0:	4918      	ldr	r1, [pc, #96]	; (8000c24 <HAL_GPIO_Init+0x2d0>)
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	608b      	str	r3, [r1, #8]
 8000bc8:	e006      	b.n	8000bd8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <HAL_GPIO_Init+0x2d0>)
 8000bcc:	689a      	ldr	r2, [r3, #8]
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	4914      	ldr	r1, [pc, #80]	; (8000c24 <HAL_GPIO_Init+0x2d0>)
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d021      	beq.n	8000c28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <HAL_GPIO_Init+0x2d0>)
 8000be6:	68da      	ldr	r2, [r3, #12]
 8000be8:	490e      	ldr	r1, [pc, #56]	; (8000c24 <HAL_GPIO_Init+0x2d0>)
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	60cb      	str	r3, [r1, #12]
 8000bf0:	e021      	b.n	8000c36 <HAL_GPIO_Init+0x2e2>
 8000bf2:	bf00      	nop
 8000bf4:	10320000 	.word	0x10320000
 8000bf8:	10310000 	.word	0x10310000
 8000bfc:	10220000 	.word	0x10220000
 8000c00:	10210000 	.word	0x10210000
 8000c04:	10120000 	.word	0x10120000
 8000c08:	10110000 	.word	0x10110000
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40010000 	.word	0x40010000
 8000c14:	40010800 	.word	0x40010800
 8000c18:	40010c00 	.word	0x40010c00
 8000c1c:	40011000 	.word	0x40011000
 8000c20:	40011400 	.word	0x40011400
 8000c24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <HAL_GPIO_Init+0x304>)
 8000c2a:	68da      	ldr	r2, [r3, #12]
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	4909      	ldr	r1, [pc, #36]	; (8000c58 <HAL_GPIO_Init+0x304>)
 8000c32:	4013      	ands	r3, r2
 8000c34:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c38:	3301      	adds	r3, #1
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c42:	fa22 f303 	lsr.w	r3, r2, r3
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f47f ae8e 	bne.w	8000968 <HAL_GPIO_Init+0x14>
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	372c      	adds	r7, #44	; 0x2c
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	40010400 	.word	0x40010400

08000c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	807b      	strh	r3, [r7, #2]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c6c:	787b      	ldrb	r3, [r7, #1]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c72:	887a      	ldrh	r2, [r7, #2]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c78:	e003      	b.n	8000c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c7a:	887b      	ldrh	r3, [r7, #2]
 8000c7c:	041a      	lsls	r2, r3, #16
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	611a      	str	r2, [r3, #16]
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d101      	bne.n	8000c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e272      	b.n	8001184 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f000 8087 	beq.w	8000dba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cac:	4b92      	ldr	r3, [pc, #584]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f003 030c 	and.w	r3, r3, #12
 8000cb4:	2b04      	cmp	r3, #4
 8000cb6:	d00c      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cb8:	4b8f      	ldr	r3, [pc, #572]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 030c 	and.w	r3, r3, #12
 8000cc0:	2b08      	cmp	r3, #8
 8000cc2:	d112      	bne.n	8000cea <HAL_RCC_OscConfig+0x5e>
 8000cc4:	4b8c      	ldr	r3, [pc, #560]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd0:	d10b      	bne.n	8000cea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd2:	4b89      	ldr	r3, [pc, #548]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d06c      	beq.n	8000db8 <HAL_RCC_OscConfig+0x12c>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d168      	bne.n	8000db8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e24c      	b.n	8001184 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cf2:	d106      	bne.n	8000d02 <HAL_RCC_OscConfig+0x76>
 8000cf4:	4b80      	ldr	r3, [pc, #512]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a7f      	ldr	r2, [pc, #508]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	e02e      	b.n	8000d60 <HAL_RCC_OscConfig+0xd4>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d10c      	bne.n	8000d24 <HAL_RCC_OscConfig+0x98>
 8000d0a:	4b7b      	ldr	r3, [pc, #492]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a7a      	ldr	r2, [pc, #488]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d14:	6013      	str	r3, [r2, #0]
 8000d16:	4b78      	ldr	r3, [pc, #480]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a77      	ldr	r2, [pc, #476]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	e01d      	b.n	8000d60 <HAL_RCC_OscConfig+0xd4>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d2c:	d10c      	bne.n	8000d48 <HAL_RCC_OscConfig+0xbc>
 8000d2e:	4b72      	ldr	r3, [pc, #456]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a71      	ldr	r2, [pc, #452]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	4b6f      	ldr	r3, [pc, #444]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a6e      	ldr	r2, [pc, #440]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	e00b      	b.n	8000d60 <HAL_RCC_OscConfig+0xd4>
 8000d48:	4b6b      	ldr	r3, [pc, #428]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a6a      	ldr	r2, [pc, #424]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	4b68      	ldr	r3, [pc, #416]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a67      	ldr	r2, [pc, #412]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d013      	beq.n	8000d90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d68:	f7ff fd06 	bl	8000778 <HAL_GetTick>
 8000d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d6e:	e008      	b.n	8000d82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d70:	f7ff fd02 	bl	8000778 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b64      	cmp	r3, #100	; 0x64
 8000d7c:	d901      	bls.n	8000d82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e200      	b.n	8001184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d82:	4b5d      	ldr	r3, [pc, #372]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0f0      	beq.n	8000d70 <HAL_RCC_OscConfig+0xe4>
 8000d8e:	e014      	b.n	8000dba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d90:	f7ff fcf2 	bl	8000778 <HAL_GetTick>
 8000d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d96:	e008      	b.n	8000daa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d98:	f7ff fcee 	bl	8000778 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b64      	cmp	r3, #100	; 0x64
 8000da4:	d901      	bls.n	8000daa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e1ec      	b.n	8001184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000daa:	4b53      	ldr	r3, [pc, #332]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1f0      	bne.n	8000d98 <HAL_RCC_OscConfig+0x10c>
 8000db6:	e000      	b.n	8000dba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d063      	beq.n	8000e8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dc6:	4b4c      	ldr	r3, [pc, #304]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 030c 	and.w	r3, r3, #12
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d00b      	beq.n	8000dea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dd2:	4b49      	ldr	r3, [pc, #292]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 030c 	and.w	r3, r3, #12
 8000dda:	2b08      	cmp	r3, #8
 8000ddc:	d11c      	bne.n	8000e18 <HAL_RCC_OscConfig+0x18c>
 8000dde:	4b46      	ldr	r3, [pc, #280]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d116      	bne.n	8000e18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dea:	4b43      	ldr	r3, [pc, #268]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d005      	beq.n	8000e02 <HAL_RCC_OscConfig+0x176>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	691b      	ldr	r3, [r3, #16]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d001      	beq.n	8000e02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e1c0      	b.n	8001184 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e02:	4b3d      	ldr	r3, [pc, #244]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	4939      	ldr	r1, [pc, #228]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000e12:	4313      	orrs	r3, r2
 8000e14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e16:	e03a      	b.n	8000e8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	691b      	ldr	r3, [r3, #16]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d020      	beq.n	8000e62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e20:	4b36      	ldr	r3, [pc, #216]	; (8000efc <HAL_RCC_OscConfig+0x270>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e26:	f7ff fca7 	bl	8000778 <HAL_GetTick>
 8000e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e2c:	e008      	b.n	8000e40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e2e:	f7ff fca3 	bl	8000778 <HAL_GetTick>
 8000e32:	4602      	mov	r2, r0
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d901      	bls.n	8000e40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e1a1      	b.n	8001184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e40:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0f0      	beq.n	8000e2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e4c:	4b2a      	ldr	r3, [pc, #168]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	4927      	ldr	r1, [pc, #156]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	600b      	str	r3, [r1, #0]
 8000e60:	e015      	b.n	8000e8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e62:	4b26      	ldr	r3, [pc, #152]	; (8000efc <HAL_RCC_OscConfig+0x270>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e68:	f7ff fc86 	bl	8000778 <HAL_GetTick>
 8000e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e6e:	e008      	b.n	8000e82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e70:	f7ff fc82 	bl	8000778 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e180      	b.n	8001184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e82:	4b1d      	ldr	r3, [pc, #116]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1f0      	bne.n	8000e70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d03a      	beq.n	8000f10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d019      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <HAL_RCC_OscConfig+0x274>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea8:	f7ff fc66 	bl	8000778 <HAL_GetTick>
 8000eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eae:	e008      	b.n	8000ec2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eb0:	f7ff fc62 	bl	8000778 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d901      	bls.n	8000ec2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e160      	b.n	8001184 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d0f0      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f000 fad8 	bl	8001484 <RCC_Delay>
 8000ed4:	e01c      	b.n	8000f10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <HAL_RCC_OscConfig+0x274>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000edc:	f7ff fc4c 	bl	8000778 <HAL_GetTick>
 8000ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee2:	e00f      	b.n	8000f04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ee4:	f7ff fc48 	bl	8000778 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d908      	bls.n	8000f04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e146      	b.n	8001184 <HAL_RCC_OscConfig+0x4f8>
 8000ef6:	bf00      	nop
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	42420000 	.word	0x42420000
 8000f00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f04:	4b92      	ldr	r3, [pc, #584]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 8000f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1e9      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f000 80a6 	beq.w	800106a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f22:	4b8b      	ldr	r3, [pc, #556]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10d      	bne.n	8000f4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	4b88      	ldr	r3, [pc, #544]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	4a87      	ldr	r2, [pc, #540]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 8000f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f38:	61d3      	str	r3, [r2, #28]
 8000f3a:	4b85      	ldr	r3, [pc, #532]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f46:	2301      	movs	r3, #1
 8000f48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f4a:	4b82      	ldr	r3, [pc, #520]	; (8001154 <HAL_RCC_OscConfig+0x4c8>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d118      	bne.n	8000f88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f56:	4b7f      	ldr	r3, [pc, #508]	; (8001154 <HAL_RCC_OscConfig+0x4c8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a7e      	ldr	r2, [pc, #504]	; (8001154 <HAL_RCC_OscConfig+0x4c8>)
 8000f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f62:	f7ff fc09 	bl	8000778 <HAL_GetTick>
 8000f66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f68:	e008      	b.n	8000f7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f6a:	f7ff fc05 	bl	8000778 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b64      	cmp	r3, #100	; 0x64
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e103      	b.n	8001184 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f7c:	4b75      	ldr	r3, [pc, #468]	; (8001154 <HAL_RCC_OscConfig+0x4c8>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0f0      	beq.n	8000f6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d106      	bne.n	8000f9e <HAL_RCC_OscConfig+0x312>
 8000f90:	4b6f      	ldr	r3, [pc, #444]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 8000f92:	6a1b      	ldr	r3, [r3, #32]
 8000f94:	4a6e      	ldr	r2, [pc, #440]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6213      	str	r3, [r2, #32]
 8000f9c:	e02d      	b.n	8000ffa <HAL_RCC_OscConfig+0x36e>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10c      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x334>
 8000fa6:	4b6a      	ldr	r3, [pc, #424]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 8000fa8:	6a1b      	ldr	r3, [r3, #32]
 8000faa:	4a69      	ldr	r2, [pc, #420]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	f023 0301 	bic.w	r3, r3, #1
 8000fb0:	6213      	str	r3, [r2, #32]
 8000fb2:	4b67      	ldr	r3, [pc, #412]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 8000fb4:	6a1b      	ldr	r3, [r3, #32]
 8000fb6:	4a66      	ldr	r2, [pc, #408]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 8000fb8:	f023 0304 	bic.w	r3, r3, #4
 8000fbc:	6213      	str	r3, [r2, #32]
 8000fbe:	e01c      	b.n	8000ffa <HAL_RCC_OscConfig+0x36e>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	2b05      	cmp	r3, #5
 8000fc6:	d10c      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x356>
 8000fc8:	4b61      	ldr	r3, [pc, #388]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 8000fca:	6a1b      	ldr	r3, [r3, #32]
 8000fcc:	4a60      	ldr	r2, [pc, #384]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 8000fce:	f043 0304 	orr.w	r3, r3, #4
 8000fd2:	6213      	str	r3, [r2, #32]
 8000fd4:	4b5e      	ldr	r3, [pc, #376]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	4a5d      	ldr	r2, [pc, #372]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	6213      	str	r3, [r2, #32]
 8000fe0:	e00b      	b.n	8000ffa <HAL_RCC_OscConfig+0x36e>
 8000fe2:	4b5b      	ldr	r3, [pc, #364]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 8000fe4:	6a1b      	ldr	r3, [r3, #32]
 8000fe6:	4a5a      	ldr	r2, [pc, #360]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 8000fe8:	f023 0301 	bic.w	r3, r3, #1
 8000fec:	6213      	str	r3, [r2, #32]
 8000fee:	4b58      	ldr	r3, [pc, #352]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	6a1b      	ldr	r3, [r3, #32]
 8000ff2:	4a57      	ldr	r2, [pc, #348]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	f023 0304 	bic.w	r3, r3, #4
 8000ff8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d015      	beq.n	800102e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001002:	f7ff fbb9 	bl	8000778 <HAL_GetTick>
 8001006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001008:	e00a      	b.n	8001020 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800100a:	f7ff fbb5 	bl	8000778 <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	f241 3288 	movw	r2, #5000	; 0x1388
 8001018:	4293      	cmp	r3, r2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e0b1      	b.n	8001184 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001020:	4b4b      	ldr	r3, [pc, #300]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 8001022:	6a1b      	ldr	r3, [r3, #32]
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0ee      	beq.n	800100a <HAL_RCC_OscConfig+0x37e>
 800102c:	e014      	b.n	8001058 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800102e:	f7ff fba3 	bl	8000778 <HAL_GetTick>
 8001032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001034:	e00a      	b.n	800104c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001036:	f7ff fb9f 	bl	8000778 <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	f241 3288 	movw	r2, #5000	; 0x1388
 8001044:	4293      	cmp	r3, r2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e09b      	b.n	8001184 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800104c:	4b40      	ldr	r3, [pc, #256]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1ee      	bne.n	8001036 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001058:	7dfb      	ldrb	r3, [r7, #23]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d105      	bne.n	800106a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800105e:	4b3c      	ldr	r3, [pc, #240]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	4a3b      	ldr	r2, [pc, #236]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 8001064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001068:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 8087 	beq.w	8001182 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001074:	4b36      	ldr	r3, [pc, #216]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 030c 	and.w	r3, r3, #12
 800107c:	2b08      	cmp	r3, #8
 800107e:	d061      	beq.n	8001144 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69db      	ldr	r3, [r3, #28]
 8001084:	2b02      	cmp	r3, #2
 8001086:	d146      	bne.n	8001116 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001088:	4b33      	ldr	r3, [pc, #204]	; (8001158 <HAL_RCC_OscConfig+0x4cc>)
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108e:	f7ff fb73 	bl	8000778 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001096:	f7ff fb6f 	bl	8000778 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e06d      	b.n	8001184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010a8:	4b29      	ldr	r3, [pc, #164]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1f0      	bne.n	8001096 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010bc:	d108      	bne.n	80010d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010be:	4b24      	ldr	r3, [pc, #144]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	4921      	ldr	r1, [pc, #132]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 80010cc:	4313      	orrs	r3, r2
 80010ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010d0:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a19      	ldr	r1, [r3, #32]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	430b      	orrs	r3, r1
 80010e2:	491b      	ldr	r1, [pc, #108]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	4313      	orrs	r3, r2
 80010e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010e8:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <HAL_RCC_OscConfig+0x4cc>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ee:	f7ff fb43 	bl	8000778 <HAL_GetTick>
 80010f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010f4:	e008      	b.n	8001108 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010f6:	f7ff fb3f 	bl	8000778 <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e03d      	b.n	8001184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0f0      	beq.n	80010f6 <HAL_RCC_OscConfig+0x46a>
 8001114:	e035      	b.n	8001182 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <HAL_RCC_OscConfig+0x4cc>)
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111c:	f7ff fb2c 	bl	8000778 <HAL_GetTick>
 8001120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001124:	f7ff fb28 	bl	8000778 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e026      	b.n	8001184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_RCC_OscConfig+0x4c4>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f0      	bne.n	8001124 <HAL_RCC_OscConfig+0x498>
 8001142:	e01e      	b.n	8001182 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69db      	ldr	r3, [r3, #28]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d107      	bne.n	800115c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e019      	b.n	8001184 <HAL_RCC_OscConfig+0x4f8>
 8001150:	40021000 	.word	0x40021000
 8001154:	40007000 	.word	0x40007000
 8001158:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <HAL_RCC_OscConfig+0x500>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a1b      	ldr	r3, [r3, #32]
 800116c:	429a      	cmp	r2, r3
 800116e:	d106      	bne.n	800117e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800117a:	429a      	cmp	r2, r3
 800117c:	d001      	beq.n	8001182 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40021000 	.word	0x40021000

08001190 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d101      	bne.n	80011a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e0d0      	b.n	8001346 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011a4:	4b6a      	ldr	r3, [pc, #424]	; (8001350 <HAL_RCC_ClockConfig+0x1c0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d910      	bls.n	80011d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b2:	4b67      	ldr	r3, [pc, #412]	; (8001350 <HAL_RCC_ClockConfig+0x1c0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f023 0207 	bic.w	r2, r3, #7
 80011ba:	4965      	ldr	r1, [pc, #404]	; (8001350 <HAL_RCC_ClockConfig+0x1c0>)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	4313      	orrs	r3, r2
 80011c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011c2:	4b63      	ldr	r3, [pc, #396]	; (8001350 <HAL_RCC_ClockConfig+0x1c0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d001      	beq.n	80011d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e0b8      	b.n	8001346 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d020      	beq.n	8001222 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d005      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011ec:	4b59      	ldr	r3, [pc, #356]	; (8001354 <HAL_RCC_ClockConfig+0x1c4>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	4a58      	ldr	r2, [pc, #352]	; (8001354 <HAL_RCC_ClockConfig+0x1c4>)
 80011f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0308 	and.w	r3, r3, #8
 8001200:	2b00      	cmp	r3, #0
 8001202:	d005      	beq.n	8001210 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001204:	4b53      	ldr	r3, [pc, #332]	; (8001354 <HAL_RCC_ClockConfig+0x1c4>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	4a52      	ldr	r2, [pc, #328]	; (8001354 <HAL_RCC_ClockConfig+0x1c4>)
 800120a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800120e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001210:	4b50      	ldr	r3, [pc, #320]	; (8001354 <HAL_RCC_ClockConfig+0x1c4>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	494d      	ldr	r1, [pc, #308]	; (8001354 <HAL_RCC_ClockConfig+0x1c4>)
 800121e:	4313      	orrs	r3, r2
 8001220:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	2b00      	cmp	r3, #0
 800122c:	d040      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d107      	bne.n	8001246 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001236:	4b47      	ldr	r3, [pc, #284]	; (8001354 <HAL_RCC_ClockConfig+0x1c4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d115      	bne.n	800126e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e07f      	b.n	8001346 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d107      	bne.n	800125e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800124e:	4b41      	ldr	r3, [pc, #260]	; (8001354 <HAL_RCC_ClockConfig+0x1c4>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d109      	bne.n	800126e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e073      	b.n	8001346 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800125e:	4b3d      	ldr	r3, [pc, #244]	; (8001354 <HAL_RCC_ClockConfig+0x1c4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e06b      	b.n	8001346 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800126e:	4b39      	ldr	r3, [pc, #228]	; (8001354 <HAL_RCC_ClockConfig+0x1c4>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f023 0203 	bic.w	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	4936      	ldr	r1, [pc, #216]	; (8001354 <HAL_RCC_ClockConfig+0x1c4>)
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001280:	f7ff fa7a 	bl	8000778 <HAL_GetTick>
 8001284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001286:	e00a      	b.n	800129e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001288:	f7ff fa76 	bl	8000778 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	f241 3288 	movw	r2, #5000	; 0x1388
 8001296:	4293      	cmp	r3, r2
 8001298:	d901      	bls.n	800129e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e053      	b.n	8001346 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800129e:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <HAL_RCC_ClockConfig+0x1c4>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 020c 	and.w	r2, r3, #12
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d1eb      	bne.n	8001288 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012b0:	4b27      	ldr	r3, [pc, #156]	; (8001350 <HAL_RCC_ClockConfig+0x1c0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0307 	and.w	r3, r3, #7
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d210      	bcs.n	80012e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012be:	4b24      	ldr	r3, [pc, #144]	; (8001350 <HAL_RCC_ClockConfig+0x1c0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f023 0207 	bic.w	r2, r3, #7
 80012c6:	4922      	ldr	r1, [pc, #136]	; (8001350 <HAL_RCC_ClockConfig+0x1c0>)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ce:	4b20      	ldr	r3, [pc, #128]	; (8001350 <HAL_RCC_ClockConfig+0x1c0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d001      	beq.n	80012e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e032      	b.n	8001346 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d008      	beq.n	80012fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HAL_RCC_ClockConfig+0x1c4>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	4916      	ldr	r1, [pc, #88]	; (8001354 <HAL_RCC_ClockConfig+0x1c4>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	2b00      	cmp	r3, #0
 8001308:	d009      	beq.n	800131e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_RCC_ClockConfig+0x1c4>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	490e      	ldr	r1, [pc, #56]	; (8001354 <HAL_RCC_ClockConfig+0x1c4>)
 800131a:	4313      	orrs	r3, r2
 800131c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800131e:	f000 f821 	bl	8001364 <HAL_RCC_GetSysClockFreq>
 8001322:	4602      	mov	r2, r0
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <HAL_RCC_ClockConfig+0x1c4>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	091b      	lsrs	r3, r3, #4
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	490a      	ldr	r1, [pc, #40]	; (8001358 <HAL_RCC_ClockConfig+0x1c8>)
 8001330:	5ccb      	ldrb	r3, [r1, r3]
 8001332:	fa22 f303 	lsr.w	r3, r2, r3
 8001336:	4a09      	ldr	r2, [pc, #36]	; (800135c <HAL_RCC_ClockConfig+0x1cc>)
 8001338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_RCC_ClockConfig+0x1d0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f9d8 	bl	80006f4 <HAL_InitTick>

  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40022000 	.word	0x40022000
 8001354:	40021000 	.word	0x40021000
 8001358:	08002330 	.word	0x08002330
 800135c:	20000000 	.word	0x20000000
 8001360:	20000004 	.word	0x20000004

08001364 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001364:	b490      	push	{r4, r7}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800136a:	4b29      	ldr	r3, [pc, #164]	; (8001410 <HAL_RCC_GetSysClockFreq+0xac>)
 800136c:	1d3c      	adds	r4, r7, #4
 800136e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001370:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001374:	f240 2301 	movw	r3, #513	; 0x201
 8001378:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800138e:	4b21      	ldr	r3, [pc, #132]	; (8001414 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 030c 	and.w	r3, r3, #12
 800139a:	2b04      	cmp	r3, #4
 800139c:	d002      	beq.n	80013a4 <HAL_RCC_GetSysClockFreq+0x40>
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d003      	beq.n	80013aa <HAL_RCC_GetSysClockFreq+0x46>
 80013a2:	e02b      	b.n	80013fc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013a4:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013a6:	623b      	str	r3, [r7, #32]
      break;
 80013a8:	e02b      	b.n	8001402 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	0c9b      	lsrs	r3, r3, #18
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	3328      	adds	r3, #40	; 0x28
 80013b4:	443b      	add	r3, r7
 80013b6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013ba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d012      	beq.n	80013ec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <HAL_RCC_GetSysClockFreq+0xb0>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	0c5b      	lsrs	r3, r3, #17
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	3328      	adds	r3, #40	; 0x28
 80013d2:	443b      	add	r3, r7
 80013d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80013d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013de:	fb03 f202 	mul.w	r2, r3, r2
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ea:	e004      	b.n	80013f6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	4a0b      	ldr	r2, [pc, #44]	; (800141c <HAL_RCC_GetSysClockFreq+0xb8>)
 80013f0:	fb02 f303 	mul.w	r3, r2, r3
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	623b      	str	r3, [r7, #32]
      break;
 80013fa:	e002      	b.n	8001402 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013fe:	623b      	str	r3, [r7, #32]
      break;
 8001400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001402:	6a3b      	ldr	r3, [r7, #32]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3728      	adds	r7, #40	; 0x28
 8001408:	46bd      	mov	sp, r7
 800140a:	bc90      	pop	{r4, r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	08002320 	.word	0x08002320
 8001414:	40021000 	.word	0x40021000
 8001418:	007a1200 	.word	0x007a1200
 800141c:	003d0900 	.word	0x003d0900

08001420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001424:	4b02      	ldr	r3, [pc, #8]	; (8001430 <HAL_RCC_GetHCLKFreq+0x10>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	20000000 	.word	0x20000000

08001434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001438:	f7ff fff2 	bl	8001420 <HAL_RCC_GetHCLKFreq>
 800143c:	4602      	mov	r2, r0
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	0a1b      	lsrs	r3, r3, #8
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	4903      	ldr	r1, [pc, #12]	; (8001458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800144a:	5ccb      	ldrb	r3, [r1, r3]
 800144c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001450:	4618      	mov	r0, r3
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40021000 	.word	0x40021000
 8001458:	08002340 	.word	0x08002340

0800145c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001460:	f7ff ffde 	bl	8001420 <HAL_RCC_GetHCLKFreq>
 8001464:	4602      	mov	r2, r0
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	0adb      	lsrs	r3, r3, #11
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	4903      	ldr	r1, [pc, #12]	; (8001480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001472:	5ccb      	ldrb	r3, [r1, r3]
 8001474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001478:	4618      	mov	r0, r3
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40021000 	.word	0x40021000
 8001480:	08002340 	.word	0x08002340

08001484 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800148c:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <RCC_Delay+0x34>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <RCC_Delay+0x38>)
 8001492:	fba2 2303 	umull	r2, r3, r2, r3
 8001496:	0a5b      	lsrs	r3, r3, #9
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	fb02 f303 	mul.w	r3, r2, r3
 800149e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014a0:	bf00      	nop
  }
  while (Delay --);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	1e5a      	subs	r2, r3, #1
 80014a6:	60fa      	str	r2, [r7, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f9      	bne.n	80014a0 <RCC_Delay+0x1c>
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	20000000 	.word	0x20000000
 80014bc:	10624dd3 	.word	0x10624dd3

080014c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e076      	b.n	80015c0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d108      	bne.n	80014ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80014e2:	d009      	beq.n	80014f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
 80014ea:	e005      	b.n	80014f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d106      	bne.n	8001518 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7fe ff5c 	bl	80003d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2202      	movs	r2, #2
 800151c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800152e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157c:	ea42 0103 	orr.w	r1, r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001584:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	0c1a      	lsrs	r2, r3, #16
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f002 0204 	and.w	r2, r2, #4
 800159e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	69da      	ldr	r2, [r3, #28]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e03f      	b.n	800165a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d106      	bne.n	80015f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7fe fff8 	bl	80005e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2224      	movs	r2, #36	; 0x24
 80015f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800160a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f905 	bl	800181c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	691a      	ldr	r2, [r3, #16]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001620:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	695a      	ldr	r2, [r3, #20]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001630:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001640:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2220      	movs	r2, #32
 800164c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2220      	movs	r2, #32
 8001654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b08a      	sub	sp, #40	; 0x28
 8001666:	af02      	add	r7, sp, #8
 8001668:	60f8      	str	r0, [r7, #12]
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	4613      	mov	r3, r2
 8001670:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b20      	cmp	r3, #32
 8001680:	d17c      	bne.n	800177c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d002      	beq.n	800168e <HAL_UART_Transmit+0x2c>
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e075      	b.n	800177e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_UART_Transmit+0x3e>
 800169c:	2302      	movs	r3, #2
 800169e:	e06e      	b.n	800177e <HAL_UART_Transmit+0x11c>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2221      	movs	r2, #33	; 0x21
 80016b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80016b6:	f7ff f85f 	bl	8000778 <HAL_GetTick>
 80016ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	88fa      	ldrh	r2, [r7, #6]
 80016c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	88fa      	ldrh	r2, [r7, #6]
 80016c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016d0:	d108      	bne.n	80016e4 <HAL_UART_Transmit+0x82>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d104      	bne.n	80016e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	61bb      	str	r3, [r7, #24]
 80016e2:	e003      	b.n	80016ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80016f4:	e02a      	b.n	800174c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	2200      	movs	r2, #0
 80016fe:	2180      	movs	r1, #128	; 0x80
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f000 f840 	bl	8001786 <UART_WaitOnFlagUntilTimeout>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e036      	b.n	800177e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10b      	bne.n	800172e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001724:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	3302      	adds	r3, #2
 800172a:	61bb      	str	r3, [r7, #24]
 800172c:	e007      	b.n	800173e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	781a      	ldrb	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	3301      	adds	r3, #1
 800173c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001742:	b29b      	uxth	r3, r3
 8001744:	3b01      	subs	r3, #1
 8001746:	b29a      	uxth	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001750:	b29b      	uxth	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1cf      	bne.n	80016f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2200      	movs	r2, #0
 800175e:	2140      	movs	r1, #64	; 0x40
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 f810 	bl	8001786 <UART_WaitOnFlagUntilTimeout>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e006      	b.n	800177e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2220      	movs	r2, #32
 8001774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	e000      	b.n	800177e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800177c:	2302      	movs	r3, #2
  }
}
 800177e:	4618      	mov	r0, r3
 8001780:	3720      	adds	r7, #32
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b084      	sub	sp, #16
 800178a:	af00      	add	r7, sp, #0
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	4613      	mov	r3, r2
 8001794:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001796:	e02c      	b.n	80017f2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179e:	d028      	beq.n	80017f2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d007      	beq.n	80017b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80017a6:	f7fe ffe7 	bl	8000778 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d21d      	bcs.n	80017f2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80017c4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	695a      	ldr	r2, [r3, #20]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0201 	bic.w	r2, r2, #1
 80017d4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2220      	movs	r2, #32
 80017da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2220      	movs	r2, #32
 80017e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e00f      	b.n	8001812 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4013      	ands	r3, r2
 80017fc:	68ba      	ldr	r2, [r7, #8]
 80017fe:	429a      	cmp	r2, r3
 8001800:	bf0c      	ite	eq
 8001802:	2301      	moveq	r3, #1
 8001804:	2300      	movne	r3, #0
 8001806:	b2db      	uxtb	r3, r3
 8001808:	461a      	mov	r2, r3
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	429a      	cmp	r2, r3
 800180e:	d0c3      	beq.n	8001798 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68da      	ldr	r2, [r3, #12]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	4313      	orrs	r3, r2
 800184a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001856:	f023 030c 	bic.w	r3, r3, #12
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	68b9      	ldr	r1, [r7, #8]
 8001860:	430b      	orrs	r3, r1
 8001862:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699a      	ldr	r2, [r3, #24]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a2c      	ldr	r2, [pc, #176]	; (8001930 <UART_SetConfig+0x114>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d103      	bne.n	800188c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001884:	f7ff fdea 	bl	800145c <HAL_RCC_GetPCLK2Freq>
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	e002      	b.n	8001892 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800188c:	f7ff fdd2 	bl	8001434 <HAL_RCC_GetPCLK1Freq>
 8001890:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	009a      	lsls	r2, r3, #2
 800189c:	441a      	add	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a8:	4a22      	ldr	r2, [pc, #136]	; (8001934 <UART_SetConfig+0x118>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	0119      	lsls	r1, r3, #4
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	009a      	lsls	r2, r3, #2
 80018bc:	441a      	add	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80018c8:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <UART_SetConfig+0x118>)
 80018ca:	fba3 0302 	umull	r0, r3, r3, r2
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	2064      	movs	r0, #100	; 0x64
 80018d2:	fb00 f303 	mul.w	r3, r0, r3
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	3332      	adds	r3, #50	; 0x32
 80018dc:	4a15      	ldr	r2, [pc, #84]	; (8001934 <UART_SetConfig+0x118>)
 80018de:	fba2 2303 	umull	r2, r3, r2, r3
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018e8:	4419      	add	r1, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	009a      	lsls	r2, r3, #2
 80018f4:	441a      	add	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <UART_SetConfig+0x118>)
 8001902:	fba3 0302 	umull	r0, r3, r3, r2
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	2064      	movs	r0, #100	; 0x64
 800190a:	fb00 f303 	mul.w	r3, r0, r3
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	3332      	adds	r3, #50	; 0x32
 8001914:	4a07      	ldr	r2, [pc, #28]	; (8001934 <UART_SetConfig+0x118>)
 8001916:	fba2 2303 	umull	r2, r3, r2, r3
 800191a:	095b      	lsrs	r3, r3, #5
 800191c:	f003 020f 	and.w	r2, r3, #15
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	440a      	add	r2, r1
 8001926:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001928:	bf00      	nop
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40013800 	.word	0x40013800
 8001934:	51eb851f 	.word	0x51eb851f

08001938 <__errno>:
 8001938:	4b01      	ldr	r3, [pc, #4]	; (8001940 <__errno+0x8>)
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	2000000c 	.word	0x2000000c

08001944 <__libc_init_array>:
 8001944:	b570      	push	{r4, r5, r6, lr}
 8001946:	2600      	movs	r6, #0
 8001948:	4d0c      	ldr	r5, [pc, #48]	; (800197c <__libc_init_array+0x38>)
 800194a:	4c0d      	ldr	r4, [pc, #52]	; (8001980 <__libc_init_array+0x3c>)
 800194c:	1b64      	subs	r4, r4, r5
 800194e:	10a4      	asrs	r4, r4, #2
 8001950:	42a6      	cmp	r6, r4
 8001952:	d109      	bne.n	8001968 <__libc_init_array+0x24>
 8001954:	f000 fc9c 	bl	8002290 <_init>
 8001958:	2600      	movs	r6, #0
 800195a:	4d0a      	ldr	r5, [pc, #40]	; (8001984 <__libc_init_array+0x40>)
 800195c:	4c0a      	ldr	r4, [pc, #40]	; (8001988 <__libc_init_array+0x44>)
 800195e:	1b64      	subs	r4, r4, r5
 8001960:	10a4      	asrs	r4, r4, #2
 8001962:	42a6      	cmp	r6, r4
 8001964:	d105      	bne.n	8001972 <__libc_init_array+0x2e>
 8001966:	bd70      	pop	{r4, r5, r6, pc}
 8001968:	f855 3b04 	ldr.w	r3, [r5], #4
 800196c:	4798      	blx	r3
 800196e:	3601      	adds	r6, #1
 8001970:	e7ee      	b.n	8001950 <__libc_init_array+0xc>
 8001972:	f855 3b04 	ldr.w	r3, [r5], #4
 8001976:	4798      	blx	r3
 8001978:	3601      	adds	r6, #1
 800197a:	e7f2      	b.n	8001962 <__libc_init_array+0x1e>
 800197c:	0800237c 	.word	0x0800237c
 8001980:	0800237c 	.word	0x0800237c
 8001984:	0800237c 	.word	0x0800237c
 8001988:	08002380 	.word	0x08002380

0800198c <memcpy>:
 800198c:	440a      	add	r2, r1
 800198e:	4291      	cmp	r1, r2
 8001990:	f100 33ff 	add.w	r3, r0, #4294967295
 8001994:	d100      	bne.n	8001998 <memcpy+0xc>
 8001996:	4770      	bx	lr
 8001998:	b510      	push	{r4, lr}
 800199a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800199e:	4291      	cmp	r1, r2
 80019a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80019a4:	d1f9      	bne.n	800199a <memcpy+0xe>
 80019a6:	bd10      	pop	{r4, pc}

080019a8 <memset>:
 80019a8:	4603      	mov	r3, r0
 80019aa:	4402      	add	r2, r0
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d100      	bne.n	80019b2 <memset+0xa>
 80019b0:	4770      	bx	lr
 80019b2:	f803 1b01 	strb.w	r1, [r3], #1
 80019b6:	e7f9      	b.n	80019ac <memset+0x4>

080019b8 <siprintf>:
 80019b8:	b40e      	push	{r1, r2, r3}
 80019ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80019be:	b500      	push	{lr}
 80019c0:	b09c      	sub	sp, #112	; 0x70
 80019c2:	ab1d      	add	r3, sp, #116	; 0x74
 80019c4:	9002      	str	r0, [sp, #8]
 80019c6:	9006      	str	r0, [sp, #24]
 80019c8:	9107      	str	r1, [sp, #28]
 80019ca:	9104      	str	r1, [sp, #16]
 80019cc:	4808      	ldr	r0, [pc, #32]	; (80019f0 <siprintf+0x38>)
 80019ce:	4909      	ldr	r1, [pc, #36]	; (80019f4 <siprintf+0x3c>)
 80019d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80019d4:	9105      	str	r1, [sp, #20]
 80019d6:	6800      	ldr	r0, [r0, #0]
 80019d8:	a902      	add	r1, sp, #8
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	f000 f868 	bl	8001ab0 <_svfiprintf_r>
 80019e0:	2200      	movs	r2, #0
 80019e2:	9b02      	ldr	r3, [sp, #8]
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	b01c      	add	sp, #112	; 0x70
 80019e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80019ec:	b003      	add	sp, #12
 80019ee:	4770      	bx	lr
 80019f0:	2000000c 	.word	0x2000000c
 80019f4:	ffff0208 	.word	0xffff0208

080019f8 <__ssputs_r>:
 80019f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019fc:	688e      	ldr	r6, [r1, #8]
 80019fe:	4682      	mov	sl, r0
 8001a00:	429e      	cmp	r6, r3
 8001a02:	460c      	mov	r4, r1
 8001a04:	4690      	mov	r8, r2
 8001a06:	461f      	mov	r7, r3
 8001a08:	d838      	bhi.n	8001a7c <__ssputs_r+0x84>
 8001a0a:	898a      	ldrh	r2, [r1, #12]
 8001a0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001a10:	d032      	beq.n	8001a78 <__ssputs_r+0x80>
 8001a12:	6825      	ldr	r5, [r4, #0]
 8001a14:	6909      	ldr	r1, [r1, #16]
 8001a16:	3301      	adds	r3, #1
 8001a18:	eba5 0901 	sub.w	r9, r5, r1
 8001a1c:	6965      	ldr	r5, [r4, #20]
 8001a1e:	444b      	add	r3, r9
 8001a20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001a24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001a28:	106d      	asrs	r5, r5, #1
 8001a2a:	429d      	cmp	r5, r3
 8001a2c:	bf38      	it	cc
 8001a2e:	461d      	movcc	r5, r3
 8001a30:	0553      	lsls	r3, r2, #21
 8001a32:	d531      	bpl.n	8001a98 <__ssputs_r+0xa0>
 8001a34:	4629      	mov	r1, r5
 8001a36:	f000 fb61 	bl	80020fc <_malloc_r>
 8001a3a:	4606      	mov	r6, r0
 8001a3c:	b950      	cbnz	r0, 8001a54 <__ssputs_r+0x5c>
 8001a3e:	230c      	movs	r3, #12
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	f8ca 3000 	str.w	r3, [sl]
 8001a48:	89a3      	ldrh	r3, [r4, #12]
 8001a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a4e:	81a3      	strh	r3, [r4, #12]
 8001a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a54:	464a      	mov	r2, r9
 8001a56:	6921      	ldr	r1, [r4, #16]
 8001a58:	f7ff ff98 	bl	800198c <memcpy>
 8001a5c:	89a3      	ldrh	r3, [r4, #12]
 8001a5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a66:	81a3      	strh	r3, [r4, #12]
 8001a68:	6126      	str	r6, [r4, #16]
 8001a6a:	444e      	add	r6, r9
 8001a6c:	6026      	str	r6, [r4, #0]
 8001a6e:	463e      	mov	r6, r7
 8001a70:	6165      	str	r5, [r4, #20]
 8001a72:	eba5 0509 	sub.w	r5, r5, r9
 8001a76:	60a5      	str	r5, [r4, #8]
 8001a78:	42be      	cmp	r6, r7
 8001a7a:	d900      	bls.n	8001a7e <__ssputs_r+0x86>
 8001a7c:	463e      	mov	r6, r7
 8001a7e:	4632      	mov	r2, r6
 8001a80:	4641      	mov	r1, r8
 8001a82:	6820      	ldr	r0, [r4, #0]
 8001a84:	f000 fab8 	bl	8001ff8 <memmove>
 8001a88:	68a3      	ldr	r3, [r4, #8]
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	1b9b      	subs	r3, r3, r6
 8001a8e:	60a3      	str	r3, [r4, #8]
 8001a90:	6823      	ldr	r3, [r4, #0]
 8001a92:	4433      	add	r3, r6
 8001a94:	6023      	str	r3, [r4, #0]
 8001a96:	e7db      	b.n	8001a50 <__ssputs_r+0x58>
 8001a98:	462a      	mov	r2, r5
 8001a9a:	f000 fba3 	bl	80021e4 <_realloc_r>
 8001a9e:	4606      	mov	r6, r0
 8001aa0:	2800      	cmp	r0, #0
 8001aa2:	d1e1      	bne.n	8001a68 <__ssputs_r+0x70>
 8001aa4:	4650      	mov	r0, sl
 8001aa6:	6921      	ldr	r1, [r4, #16]
 8001aa8:	f000 fac0 	bl	800202c <_free_r>
 8001aac:	e7c7      	b.n	8001a3e <__ssputs_r+0x46>
	...

08001ab0 <_svfiprintf_r>:
 8001ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ab4:	4698      	mov	r8, r3
 8001ab6:	898b      	ldrh	r3, [r1, #12]
 8001ab8:	4607      	mov	r7, r0
 8001aba:	061b      	lsls	r3, r3, #24
 8001abc:	460d      	mov	r5, r1
 8001abe:	4614      	mov	r4, r2
 8001ac0:	b09d      	sub	sp, #116	; 0x74
 8001ac2:	d50e      	bpl.n	8001ae2 <_svfiprintf_r+0x32>
 8001ac4:	690b      	ldr	r3, [r1, #16]
 8001ac6:	b963      	cbnz	r3, 8001ae2 <_svfiprintf_r+0x32>
 8001ac8:	2140      	movs	r1, #64	; 0x40
 8001aca:	f000 fb17 	bl	80020fc <_malloc_r>
 8001ace:	6028      	str	r0, [r5, #0]
 8001ad0:	6128      	str	r0, [r5, #16]
 8001ad2:	b920      	cbnz	r0, 8001ade <_svfiprintf_r+0x2e>
 8001ad4:	230c      	movs	r3, #12
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8001adc:	e0d1      	b.n	8001c82 <_svfiprintf_r+0x1d2>
 8001ade:	2340      	movs	r3, #64	; 0x40
 8001ae0:	616b      	str	r3, [r5, #20]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8001ae6:	2320      	movs	r3, #32
 8001ae8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001aec:	2330      	movs	r3, #48	; 0x30
 8001aee:	f04f 0901 	mov.w	r9, #1
 8001af2:	f8cd 800c 	str.w	r8, [sp, #12]
 8001af6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001c9c <_svfiprintf_r+0x1ec>
 8001afa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001afe:	4623      	mov	r3, r4
 8001b00:	469a      	mov	sl, r3
 8001b02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001b06:	b10a      	cbz	r2, 8001b0c <_svfiprintf_r+0x5c>
 8001b08:	2a25      	cmp	r2, #37	; 0x25
 8001b0a:	d1f9      	bne.n	8001b00 <_svfiprintf_r+0x50>
 8001b0c:	ebba 0b04 	subs.w	fp, sl, r4
 8001b10:	d00b      	beq.n	8001b2a <_svfiprintf_r+0x7a>
 8001b12:	465b      	mov	r3, fp
 8001b14:	4622      	mov	r2, r4
 8001b16:	4629      	mov	r1, r5
 8001b18:	4638      	mov	r0, r7
 8001b1a:	f7ff ff6d 	bl	80019f8 <__ssputs_r>
 8001b1e:	3001      	adds	r0, #1
 8001b20:	f000 80aa 	beq.w	8001c78 <_svfiprintf_r+0x1c8>
 8001b24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001b26:	445a      	add	r2, fp
 8001b28:	9209      	str	r2, [sp, #36]	; 0x24
 8001b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 80a2 	beq.w	8001c78 <_svfiprintf_r+0x1c8>
 8001b34:	2300      	movs	r3, #0
 8001b36:	f04f 32ff 	mov.w	r2, #4294967295
 8001b3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b3e:	f10a 0a01 	add.w	sl, sl, #1
 8001b42:	9304      	str	r3, [sp, #16]
 8001b44:	9307      	str	r3, [sp, #28]
 8001b46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001b4a:	931a      	str	r3, [sp, #104]	; 0x68
 8001b4c:	4654      	mov	r4, sl
 8001b4e:	2205      	movs	r2, #5
 8001b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b54:	4851      	ldr	r0, [pc, #324]	; (8001c9c <_svfiprintf_r+0x1ec>)
 8001b56:	f000 fa41 	bl	8001fdc <memchr>
 8001b5a:	9a04      	ldr	r2, [sp, #16]
 8001b5c:	b9d8      	cbnz	r0, 8001b96 <_svfiprintf_r+0xe6>
 8001b5e:	06d0      	lsls	r0, r2, #27
 8001b60:	bf44      	itt	mi
 8001b62:	2320      	movmi	r3, #32
 8001b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b68:	0711      	lsls	r1, r2, #28
 8001b6a:	bf44      	itt	mi
 8001b6c:	232b      	movmi	r3, #43	; 0x2b
 8001b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b72:	f89a 3000 	ldrb.w	r3, [sl]
 8001b76:	2b2a      	cmp	r3, #42	; 0x2a
 8001b78:	d015      	beq.n	8001ba6 <_svfiprintf_r+0xf6>
 8001b7a:	4654      	mov	r4, sl
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f04f 0c0a 	mov.w	ip, #10
 8001b82:	9a07      	ldr	r2, [sp, #28]
 8001b84:	4621      	mov	r1, r4
 8001b86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b8a:	3b30      	subs	r3, #48	; 0x30
 8001b8c:	2b09      	cmp	r3, #9
 8001b8e:	d94e      	bls.n	8001c2e <_svfiprintf_r+0x17e>
 8001b90:	b1b0      	cbz	r0, 8001bc0 <_svfiprintf_r+0x110>
 8001b92:	9207      	str	r2, [sp, #28]
 8001b94:	e014      	b.n	8001bc0 <_svfiprintf_r+0x110>
 8001b96:	eba0 0308 	sub.w	r3, r0, r8
 8001b9a:	fa09 f303 	lsl.w	r3, r9, r3
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	46a2      	mov	sl, r4
 8001ba2:	9304      	str	r3, [sp, #16]
 8001ba4:	e7d2      	b.n	8001b4c <_svfiprintf_r+0x9c>
 8001ba6:	9b03      	ldr	r3, [sp, #12]
 8001ba8:	1d19      	adds	r1, r3, #4
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	9103      	str	r1, [sp, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	bfbb      	ittet	lt
 8001bb2:	425b      	neglt	r3, r3
 8001bb4:	f042 0202 	orrlt.w	r2, r2, #2
 8001bb8:	9307      	strge	r3, [sp, #28]
 8001bba:	9307      	strlt	r3, [sp, #28]
 8001bbc:	bfb8      	it	lt
 8001bbe:	9204      	strlt	r2, [sp, #16]
 8001bc0:	7823      	ldrb	r3, [r4, #0]
 8001bc2:	2b2e      	cmp	r3, #46	; 0x2e
 8001bc4:	d10c      	bne.n	8001be0 <_svfiprintf_r+0x130>
 8001bc6:	7863      	ldrb	r3, [r4, #1]
 8001bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8001bca:	d135      	bne.n	8001c38 <_svfiprintf_r+0x188>
 8001bcc:	9b03      	ldr	r3, [sp, #12]
 8001bce:	3402      	adds	r4, #2
 8001bd0:	1d1a      	adds	r2, r3, #4
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	9203      	str	r2, [sp, #12]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	bfb8      	it	lt
 8001bda:	f04f 33ff 	movlt.w	r3, #4294967295
 8001bde:	9305      	str	r3, [sp, #20]
 8001be0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001ca0 <_svfiprintf_r+0x1f0>
 8001be4:	2203      	movs	r2, #3
 8001be6:	4650      	mov	r0, sl
 8001be8:	7821      	ldrb	r1, [r4, #0]
 8001bea:	f000 f9f7 	bl	8001fdc <memchr>
 8001bee:	b140      	cbz	r0, 8001c02 <_svfiprintf_r+0x152>
 8001bf0:	2340      	movs	r3, #64	; 0x40
 8001bf2:	eba0 000a 	sub.w	r0, r0, sl
 8001bf6:	fa03 f000 	lsl.w	r0, r3, r0
 8001bfa:	9b04      	ldr	r3, [sp, #16]
 8001bfc:	3401      	adds	r4, #1
 8001bfe:	4303      	orrs	r3, r0
 8001c00:	9304      	str	r3, [sp, #16]
 8001c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c06:	2206      	movs	r2, #6
 8001c08:	4826      	ldr	r0, [pc, #152]	; (8001ca4 <_svfiprintf_r+0x1f4>)
 8001c0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001c0e:	f000 f9e5 	bl	8001fdc <memchr>
 8001c12:	2800      	cmp	r0, #0
 8001c14:	d038      	beq.n	8001c88 <_svfiprintf_r+0x1d8>
 8001c16:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <_svfiprintf_r+0x1f8>)
 8001c18:	bb1b      	cbnz	r3, 8001c62 <_svfiprintf_r+0x1b2>
 8001c1a:	9b03      	ldr	r3, [sp, #12]
 8001c1c:	3307      	adds	r3, #7
 8001c1e:	f023 0307 	bic.w	r3, r3, #7
 8001c22:	3308      	adds	r3, #8
 8001c24:	9303      	str	r3, [sp, #12]
 8001c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c28:	4433      	add	r3, r6
 8001c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8001c2c:	e767      	b.n	8001afe <_svfiprintf_r+0x4e>
 8001c2e:	460c      	mov	r4, r1
 8001c30:	2001      	movs	r0, #1
 8001c32:	fb0c 3202 	mla	r2, ip, r2, r3
 8001c36:	e7a5      	b.n	8001b84 <_svfiprintf_r+0xd4>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f04f 0c0a 	mov.w	ip, #10
 8001c3e:	4619      	mov	r1, r3
 8001c40:	3401      	adds	r4, #1
 8001c42:	9305      	str	r3, [sp, #20]
 8001c44:	4620      	mov	r0, r4
 8001c46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c4a:	3a30      	subs	r2, #48	; 0x30
 8001c4c:	2a09      	cmp	r2, #9
 8001c4e:	d903      	bls.n	8001c58 <_svfiprintf_r+0x1a8>
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0c5      	beq.n	8001be0 <_svfiprintf_r+0x130>
 8001c54:	9105      	str	r1, [sp, #20]
 8001c56:	e7c3      	b.n	8001be0 <_svfiprintf_r+0x130>
 8001c58:	4604      	mov	r4, r0
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c60:	e7f0      	b.n	8001c44 <_svfiprintf_r+0x194>
 8001c62:	ab03      	add	r3, sp, #12
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	462a      	mov	r2, r5
 8001c68:	4638      	mov	r0, r7
 8001c6a:	4b10      	ldr	r3, [pc, #64]	; (8001cac <_svfiprintf_r+0x1fc>)
 8001c6c:	a904      	add	r1, sp, #16
 8001c6e:	f3af 8000 	nop.w
 8001c72:	1c42      	adds	r2, r0, #1
 8001c74:	4606      	mov	r6, r0
 8001c76:	d1d6      	bne.n	8001c26 <_svfiprintf_r+0x176>
 8001c78:	89ab      	ldrh	r3, [r5, #12]
 8001c7a:	065b      	lsls	r3, r3, #25
 8001c7c:	f53f af2c 	bmi.w	8001ad8 <_svfiprintf_r+0x28>
 8001c80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001c82:	b01d      	add	sp, #116	; 0x74
 8001c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c88:	ab03      	add	r3, sp, #12
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	462a      	mov	r2, r5
 8001c8e:	4638      	mov	r0, r7
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <_svfiprintf_r+0x1fc>)
 8001c92:	a904      	add	r1, sp, #16
 8001c94:	f000 f87c 	bl	8001d90 <_printf_i>
 8001c98:	e7eb      	b.n	8001c72 <_svfiprintf_r+0x1c2>
 8001c9a:	bf00      	nop
 8001c9c:	08002348 	.word	0x08002348
 8001ca0:	0800234e 	.word	0x0800234e
 8001ca4:	08002352 	.word	0x08002352
 8001ca8:	00000000 	.word	0x00000000
 8001cac:	080019f9 	.word	0x080019f9

08001cb0 <_printf_common>:
 8001cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cb4:	4616      	mov	r6, r2
 8001cb6:	4699      	mov	r9, r3
 8001cb8:	688a      	ldr	r2, [r1, #8]
 8001cba:	690b      	ldr	r3, [r1, #16]
 8001cbc:	4607      	mov	r7, r0
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	bfb8      	it	lt
 8001cc2:	4613      	movlt	r3, r2
 8001cc4:	6033      	str	r3, [r6, #0]
 8001cc6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001cca:	460c      	mov	r4, r1
 8001ccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001cd0:	b10a      	cbz	r2, 8001cd6 <_printf_common+0x26>
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	6033      	str	r3, [r6, #0]
 8001cd6:	6823      	ldr	r3, [r4, #0]
 8001cd8:	0699      	lsls	r1, r3, #26
 8001cda:	bf42      	ittt	mi
 8001cdc:	6833      	ldrmi	r3, [r6, #0]
 8001cde:	3302      	addmi	r3, #2
 8001ce0:	6033      	strmi	r3, [r6, #0]
 8001ce2:	6825      	ldr	r5, [r4, #0]
 8001ce4:	f015 0506 	ands.w	r5, r5, #6
 8001ce8:	d106      	bne.n	8001cf8 <_printf_common+0x48>
 8001cea:	f104 0a19 	add.w	sl, r4, #25
 8001cee:	68e3      	ldr	r3, [r4, #12]
 8001cf0:	6832      	ldr	r2, [r6, #0]
 8001cf2:	1a9b      	subs	r3, r3, r2
 8001cf4:	42ab      	cmp	r3, r5
 8001cf6:	dc28      	bgt.n	8001d4a <_printf_common+0x9a>
 8001cf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001cfc:	1e13      	subs	r3, r2, #0
 8001cfe:	6822      	ldr	r2, [r4, #0]
 8001d00:	bf18      	it	ne
 8001d02:	2301      	movne	r3, #1
 8001d04:	0692      	lsls	r2, r2, #26
 8001d06:	d42d      	bmi.n	8001d64 <_printf_common+0xb4>
 8001d08:	4649      	mov	r1, r9
 8001d0a:	4638      	mov	r0, r7
 8001d0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001d10:	47c0      	blx	r8
 8001d12:	3001      	adds	r0, #1
 8001d14:	d020      	beq.n	8001d58 <_printf_common+0xa8>
 8001d16:	6823      	ldr	r3, [r4, #0]
 8001d18:	68e5      	ldr	r5, [r4, #12]
 8001d1a:	f003 0306 	and.w	r3, r3, #6
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	bf18      	it	ne
 8001d22:	2500      	movne	r5, #0
 8001d24:	6832      	ldr	r2, [r6, #0]
 8001d26:	f04f 0600 	mov.w	r6, #0
 8001d2a:	68a3      	ldr	r3, [r4, #8]
 8001d2c:	bf08      	it	eq
 8001d2e:	1aad      	subeq	r5, r5, r2
 8001d30:	6922      	ldr	r2, [r4, #16]
 8001d32:	bf08      	it	eq
 8001d34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	bfc4      	itt	gt
 8001d3c:	1a9b      	subgt	r3, r3, r2
 8001d3e:	18ed      	addgt	r5, r5, r3
 8001d40:	341a      	adds	r4, #26
 8001d42:	42b5      	cmp	r5, r6
 8001d44:	d11a      	bne.n	8001d7c <_printf_common+0xcc>
 8001d46:	2000      	movs	r0, #0
 8001d48:	e008      	b.n	8001d5c <_printf_common+0xac>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	4652      	mov	r2, sl
 8001d4e:	4649      	mov	r1, r9
 8001d50:	4638      	mov	r0, r7
 8001d52:	47c0      	blx	r8
 8001d54:	3001      	adds	r0, #1
 8001d56:	d103      	bne.n	8001d60 <_printf_common+0xb0>
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d60:	3501      	adds	r5, #1
 8001d62:	e7c4      	b.n	8001cee <_printf_common+0x3e>
 8001d64:	2030      	movs	r0, #48	; 0x30
 8001d66:	18e1      	adds	r1, r4, r3
 8001d68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001d72:	4422      	add	r2, r4
 8001d74:	3302      	adds	r3, #2
 8001d76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001d7a:	e7c5      	b.n	8001d08 <_printf_common+0x58>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	4622      	mov	r2, r4
 8001d80:	4649      	mov	r1, r9
 8001d82:	4638      	mov	r0, r7
 8001d84:	47c0      	blx	r8
 8001d86:	3001      	adds	r0, #1
 8001d88:	d0e6      	beq.n	8001d58 <_printf_common+0xa8>
 8001d8a:	3601      	adds	r6, #1
 8001d8c:	e7d9      	b.n	8001d42 <_printf_common+0x92>
	...

08001d90 <_printf_i>:
 8001d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d94:	7e0f      	ldrb	r7, [r1, #24]
 8001d96:	4691      	mov	r9, r2
 8001d98:	2f78      	cmp	r7, #120	; 0x78
 8001d9a:	4680      	mov	r8, r0
 8001d9c:	460c      	mov	r4, r1
 8001d9e:	469a      	mov	sl, r3
 8001da0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001da2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001da6:	d807      	bhi.n	8001db8 <_printf_i+0x28>
 8001da8:	2f62      	cmp	r7, #98	; 0x62
 8001daa:	d80a      	bhi.n	8001dc2 <_printf_i+0x32>
 8001dac:	2f00      	cmp	r7, #0
 8001dae:	f000 80d9 	beq.w	8001f64 <_printf_i+0x1d4>
 8001db2:	2f58      	cmp	r7, #88	; 0x58
 8001db4:	f000 80a4 	beq.w	8001f00 <_printf_i+0x170>
 8001db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001dbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001dc0:	e03a      	b.n	8001e38 <_printf_i+0xa8>
 8001dc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001dc6:	2b15      	cmp	r3, #21
 8001dc8:	d8f6      	bhi.n	8001db8 <_printf_i+0x28>
 8001dca:	a101      	add	r1, pc, #4	; (adr r1, 8001dd0 <_printf_i+0x40>)
 8001dcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001dd0:	08001e29 	.word	0x08001e29
 8001dd4:	08001e3d 	.word	0x08001e3d
 8001dd8:	08001db9 	.word	0x08001db9
 8001ddc:	08001db9 	.word	0x08001db9
 8001de0:	08001db9 	.word	0x08001db9
 8001de4:	08001db9 	.word	0x08001db9
 8001de8:	08001e3d 	.word	0x08001e3d
 8001dec:	08001db9 	.word	0x08001db9
 8001df0:	08001db9 	.word	0x08001db9
 8001df4:	08001db9 	.word	0x08001db9
 8001df8:	08001db9 	.word	0x08001db9
 8001dfc:	08001f4b 	.word	0x08001f4b
 8001e00:	08001e6d 	.word	0x08001e6d
 8001e04:	08001f2d 	.word	0x08001f2d
 8001e08:	08001db9 	.word	0x08001db9
 8001e0c:	08001db9 	.word	0x08001db9
 8001e10:	08001f6d 	.word	0x08001f6d
 8001e14:	08001db9 	.word	0x08001db9
 8001e18:	08001e6d 	.word	0x08001e6d
 8001e1c:	08001db9 	.word	0x08001db9
 8001e20:	08001db9 	.word	0x08001db9
 8001e24:	08001f35 	.word	0x08001f35
 8001e28:	682b      	ldr	r3, [r5, #0]
 8001e2a:	1d1a      	adds	r2, r3, #4
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	602a      	str	r2, [r5, #0]
 8001e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0a4      	b.n	8001f86 <_printf_i+0x1f6>
 8001e3c:	6820      	ldr	r0, [r4, #0]
 8001e3e:	6829      	ldr	r1, [r5, #0]
 8001e40:	0606      	lsls	r6, r0, #24
 8001e42:	f101 0304 	add.w	r3, r1, #4
 8001e46:	d50a      	bpl.n	8001e5e <_printf_i+0xce>
 8001e48:	680e      	ldr	r6, [r1, #0]
 8001e4a:	602b      	str	r3, [r5, #0]
 8001e4c:	2e00      	cmp	r6, #0
 8001e4e:	da03      	bge.n	8001e58 <_printf_i+0xc8>
 8001e50:	232d      	movs	r3, #45	; 0x2d
 8001e52:	4276      	negs	r6, r6
 8001e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e58:	230a      	movs	r3, #10
 8001e5a:	485e      	ldr	r0, [pc, #376]	; (8001fd4 <_printf_i+0x244>)
 8001e5c:	e019      	b.n	8001e92 <_printf_i+0x102>
 8001e5e:	680e      	ldr	r6, [r1, #0]
 8001e60:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001e64:	602b      	str	r3, [r5, #0]
 8001e66:	bf18      	it	ne
 8001e68:	b236      	sxthne	r6, r6
 8001e6a:	e7ef      	b.n	8001e4c <_printf_i+0xbc>
 8001e6c:	682b      	ldr	r3, [r5, #0]
 8001e6e:	6820      	ldr	r0, [r4, #0]
 8001e70:	1d19      	adds	r1, r3, #4
 8001e72:	6029      	str	r1, [r5, #0]
 8001e74:	0601      	lsls	r1, r0, #24
 8001e76:	d501      	bpl.n	8001e7c <_printf_i+0xec>
 8001e78:	681e      	ldr	r6, [r3, #0]
 8001e7a:	e002      	b.n	8001e82 <_printf_i+0xf2>
 8001e7c:	0646      	lsls	r6, r0, #25
 8001e7e:	d5fb      	bpl.n	8001e78 <_printf_i+0xe8>
 8001e80:	881e      	ldrh	r6, [r3, #0]
 8001e82:	2f6f      	cmp	r7, #111	; 0x6f
 8001e84:	bf0c      	ite	eq
 8001e86:	2308      	moveq	r3, #8
 8001e88:	230a      	movne	r3, #10
 8001e8a:	4852      	ldr	r0, [pc, #328]	; (8001fd4 <_printf_i+0x244>)
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001e92:	6865      	ldr	r5, [r4, #4]
 8001e94:	2d00      	cmp	r5, #0
 8001e96:	bfa8      	it	ge
 8001e98:	6821      	ldrge	r1, [r4, #0]
 8001e9a:	60a5      	str	r5, [r4, #8]
 8001e9c:	bfa4      	itt	ge
 8001e9e:	f021 0104 	bicge.w	r1, r1, #4
 8001ea2:	6021      	strge	r1, [r4, #0]
 8001ea4:	b90e      	cbnz	r6, 8001eaa <_printf_i+0x11a>
 8001ea6:	2d00      	cmp	r5, #0
 8001ea8:	d04d      	beq.n	8001f46 <_printf_i+0x1b6>
 8001eaa:	4615      	mov	r5, r2
 8001eac:	fbb6 f1f3 	udiv	r1, r6, r3
 8001eb0:	fb03 6711 	mls	r7, r3, r1, r6
 8001eb4:	5dc7      	ldrb	r7, [r0, r7]
 8001eb6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001eba:	4637      	mov	r7, r6
 8001ebc:	42bb      	cmp	r3, r7
 8001ebe:	460e      	mov	r6, r1
 8001ec0:	d9f4      	bls.n	8001eac <_printf_i+0x11c>
 8001ec2:	2b08      	cmp	r3, #8
 8001ec4:	d10b      	bne.n	8001ede <_printf_i+0x14e>
 8001ec6:	6823      	ldr	r3, [r4, #0]
 8001ec8:	07de      	lsls	r6, r3, #31
 8001eca:	d508      	bpl.n	8001ede <_printf_i+0x14e>
 8001ecc:	6923      	ldr	r3, [r4, #16]
 8001ece:	6861      	ldr	r1, [r4, #4]
 8001ed0:	4299      	cmp	r1, r3
 8001ed2:	bfde      	ittt	le
 8001ed4:	2330      	movle	r3, #48	; 0x30
 8001ed6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001eda:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001ede:	1b52      	subs	r2, r2, r5
 8001ee0:	6122      	str	r2, [r4, #16]
 8001ee2:	464b      	mov	r3, r9
 8001ee4:	4621      	mov	r1, r4
 8001ee6:	4640      	mov	r0, r8
 8001ee8:	f8cd a000 	str.w	sl, [sp]
 8001eec:	aa03      	add	r2, sp, #12
 8001eee:	f7ff fedf 	bl	8001cb0 <_printf_common>
 8001ef2:	3001      	adds	r0, #1
 8001ef4:	d14c      	bne.n	8001f90 <_printf_i+0x200>
 8001ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8001efa:	b004      	add	sp, #16
 8001efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f00:	4834      	ldr	r0, [pc, #208]	; (8001fd4 <_printf_i+0x244>)
 8001f02:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001f06:	6829      	ldr	r1, [r5, #0]
 8001f08:	6823      	ldr	r3, [r4, #0]
 8001f0a:	f851 6b04 	ldr.w	r6, [r1], #4
 8001f0e:	6029      	str	r1, [r5, #0]
 8001f10:	061d      	lsls	r5, r3, #24
 8001f12:	d514      	bpl.n	8001f3e <_printf_i+0x1ae>
 8001f14:	07df      	lsls	r7, r3, #31
 8001f16:	bf44      	itt	mi
 8001f18:	f043 0320 	orrmi.w	r3, r3, #32
 8001f1c:	6023      	strmi	r3, [r4, #0]
 8001f1e:	b91e      	cbnz	r6, 8001f28 <_printf_i+0x198>
 8001f20:	6823      	ldr	r3, [r4, #0]
 8001f22:	f023 0320 	bic.w	r3, r3, #32
 8001f26:	6023      	str	r3, [r4, #0]
 8001f28:	2310      	movs	r3, #16
 8001f2a:	e7af      	b.n	8001e8c <_printf_i+0xfc>
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	f043 0320 	orr.w	r3, r3, #32
 8001f32:	6023      	str	r3, [r4, #0]
 8001f34:	2378      	movs	r3, #120	; 0x78
 8001f36:	4828      	ldr	r0, [pc, #160]	; (8001fd8 <_printf_i+0x248>)
 8001f38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001f3c:	e7e3      	b.n	8001f06 <_printf_i+0x176>
 8001f3e:	0659      	lsls	r1, r3, #25
 8001f40:	bf48      	it	mi
 8001f42:	b2b6      	uxthmi	r6, r6
 8001f44:	e7e6      	b.n	8001f14 <_printf_i+0x184>
 8001f46:	4615      	mov	r5, r2
 8001f48:	e7bb      	b.n	8001ec2 <_printf_i+0x132>
 8001f4a:	682b      	ldr	r3, [r5, #0]
 8001f4c:	6826      	ldr	r6, [r4, #0]
 8001f4e:	1d18      	adds	r0, r3, #4
 8001f50:	6961      	ldr	r1, [r4, #20]
 8001f52:	6028      	str	r0, [r5, #0]
 8001f54:	0635      	lsls	r5, r6, #24
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	d501      	bpl.n	8001f5e <_printf_i+0x1ce>
 8001f5a:	6019      	str	r1, [r3, #0]
 8001f5c:	e002      	b.n	8001f64 <_printf_i+0x1d4>
 8001f5e:	0670      	lsls	r0, r6, #25
 8001f60:	d5fb      	bpl.n	8001f5a <_printf_i+0x1ca>
 8001f62:	8019      	strh	r1, [r3, #0]
 8001f64:	2300      	movs	r3, #0
 8001f66:	4615      	mov	r5, r2
 8001f68:	6123      	str	r3, [r4, #16]
 8001f6a:	e7ba      	b.n	8001ee2 <_printf_i+0x152>
 8001f6c:	682b      	ldr	r3, [r5, #0]
 8001f6e:	2100      	movs	r1, #0
 8001f70:	1d1a      	adds	r2, r3, #4
 8001f72:	602a      	str	r2, [r5, #0]
 8001f74:	681d      	ldr	r5, [r3, #0]
 8001f76:	6862      	ldr	r2, [r4, #4]
 8001f78:	4628      	mov	r0, r5
 8001f7a:	f000 f82f 	bl	8001fdc <memchr>
 8001f7e:	b108      	cbz	r0, 8001f84 <_printf_i+0x1f4>
 8001f80:	1b40      	subs	r0, r0, r5
 8001f82:	6060      	str	r0, [r4, #4]
 8001f84:	6863      	ldr	r3, [r4, #4]
 8001f86:	6123      	str	r3, [r4, #16]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f8e:	e7a8      	b.n	8001ee2 <_printf_i+0x152>
 8001f90:	462a      	mov	r2, r5
 8001f92:	4649      	mov	r1, r9
 8001f94:	4640      	mov	r0, r8
 8001f96:	6923      	ldr	r3, [r4, #16]
 8001f98:	47d0      	blx	sl
 8001f9a:	3001      	adds	r0, #1
 8001f9c:	d0ab      	beq.n	8001ef6 <_printf_i+0x166>
 8001f9e:	6823      	ldr	r3, [r4, #0]
 8001fa0:	079b      	lsls	r3, r3, #30
 8001fa2:	d413      	bmi.n	8001fcc <_printf_i+0x23c>
 8001fa4:	68e0      	ldr	r0, [r4, #12]
 8001fa6:	9b03      	ldr	r3, [sp, #12]
 8001fa8:	4298      	cmp	r0, r3
 8001faa:	bfb8      	it	lt
 8001fac:	4618      	movlt	r0, r3
 8001fae:	e7a4      	b.n	8001efa <_printf_i+0x16a>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	4632      	mov	r2, r6
 8001fb4:	4649      	mov	r1, r9
 8001fb6:	4640      	mov	r0, r8
 8001fb8:	47d0      	blx	sl
 8001fba:	3001      	adds	r0, #1
 8001fbc:	d09b      	beq.n	8001ef6 <_printf_i+0x166>
 8001fbe:	3501      	adds	r5, #1
 8001fc0:	68e3      	ldr	r3, [r4, #12]
 8001fc2:	9903      	ldr	r1, [sp, #12]
 8001fc4:	1a5b      	subs	r3, r3, r1
 8001fc6:	42ab      	cmp	r3, r5
 8001fc8:	dcf2      	bgt.n	8001fb0 <_printf_i+0x220>
 8001fca:	e7eb      	b.n	8001fa4 <_printf_i+0x214>
 8001fcc:	2500      	movs	r5, #0
 8001fce:	f104 0619 	add.w	r6, r4, #25
 8001fd2:	e7f5      	b.n	8001fc0 <_printf_i+0x230>
 8001fd4:	08002359 	.word	0x08002359
 8001fd8:	0800236a 	.word	0x0800236a

08001fdc <memchr>:
 8001fdc:	4603      	mov	r3, r0
 8001fde:	b510      	push	{r4, lr}
 8001fe0:	b2c9      	uxtb	r1, r1
 8001fe2:	4402      	add	r2, r0
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	d101      	bne.n	8001fee <memchr+0x12>
 8001fea:	2000      	movs	r0, #0
 8001fec:	e003      	b.n	8001ff6 <memchr+0x1a>
 8001fee:	7804      	ldrb	r4, [r0, #0]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	428c      	cmp	r4, r1
 8001ff4:	d1f6      	bne.n	8001fe4 <memchr+0x8>
 8001ff6:	bd10      	pop	{r4, pc}

08001ff8 <memmove>:
 8001ff8:	4288      	cmp	r0, r1
 8001ffa:	b510      	push	{r4, lr}
 8001ffc:	eb01 0402 	add.w	r4, r1, r2
 8002000:	d902      	bls.n	8002008 <memmove+0x10>
 8002002:	4284      	cmp	r4, r0
 8002004:	4623      	mov	r3, r4
 8002006:	d807      	bhi.n	8002018 <memmove+0x20>
 8002008:	1e43      	subs	r3, r0, #1
 800200a:	42a1      	cmp	r1, r4
 800200c:	d008      	beq.n	8002020 <memmove+0x28>
 800200e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002012:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002016:	e7f8      	b.n	800200a <memmove+0x12>
 8002018:	4601      	mov	r1, r0
 800201a:	4402      	add	r2, r0
 800201c:	428a      	cmp	r2, r1
 800201e:	d100      	bne.n	8002022 <memmove+0x2a>
 8002020:	bd10      	pop	{r4, pc}
 8002022:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002026:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800202a:	e7f7      	b.n	800201c <memmove+0x24>

0800202c <_free_r>:
 800202c:	b538      	push	{r3, r4, r5, lr}
 800202e:	4605      	mov	r5, r0
 8002030:	2900      	cmp	r1, #0
 8002032:	d040      	beq.n	80020b6 <_free_r+0x8a>
 8002034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002038:	1f0c      	subs	r4, r1, #4
 800203a:	2b00      	cmp	r3, #0
 800203c:	bfb8      	it	lt
 800203e:	18e4      	addlt	r4, r4, r3
 8002040:	f000 f910 	bl	8002264 <__malloc_lock>
 8002044:	4a1c      	ldr	r2, [pc, #112]	; (80020b8 <_free_r+0x8c>)
 8002046:	6813      	ldr	r3, [r2, #0]
 8002048:	b933      	cbnz	r3, 8002058 <_free_r+0x2c>
 800204a:	6063      	str	r3, [r4, #4]
 800204c:	6014      	str	r4, [r2, #0]
 800204e:	4628      	mov	r0, r5
 8002050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002054:	f000 b90c 	b.w	8002270 <__malloc_unlock>
 8002058:	42a3      	cmp	r3, r4
 800205a:	d908      	bls.n	800206e <_free_r+0x42>
 800205c:	6820      	ldr	r0, [r4, #0]
 800205e:	1821      	adds	r1, r4, r0
 8002060:	428b      	cmp	r3, r1
 8002062:	bf01      	itttt	eq
 8002064:	6819      	ldreq	r1, [r3, #0]
 8002066:	685b      	ldreq	r3, [r3, #4]
 8002068:	1809      	addeq	r1, r1, r0
 800206a:	6021      	streq	r1, [r4, #0]
 800206c:	e7ed      	b.n	800204a <_free_r+0x1e>
 800206e:	461a      	mov	r2, r3
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	b10b      	cbz	r3, 8002078 <_free_r+0x4c>
 8002074:	42a3      	cmp	r3, r4
 8002076:	d9fa      	bls.n	800206e <_free_r+0x42>
 8002078:	6811      	ldr	r1, [r2, #0]
 800207a:	1850      	adds	r0, r2, r1
 800207c:	42a0      	cmp	r0, r4
 800207e:	d10b      	bne.n	8002098 <_free_r+0x6c>
 8002080:	6820      	ldr	r0, [r4, #0]
 8002082:	4401      	add	r1, r0
 8002084:	1850      	adds	r0, r2, r1
 8002086:	4283      	cmp	r3, r0
 8002088:	6011      	str	r1, [r2, #0]
 800208a:	d1e0      	bne.n	800204e <_free_r+0x22>
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	4401      	add	r1, r0
 8002092:	6011      	str	r1, [r2, #0]
 8002094:	6053      	str	r3, [r2, #4]
 8002096:	e7da      	b.n	800204e <_free_r+0x22>
 8002098:	d902      	bls.n	80020a0 <_free_r+0x74>
 800209a:	230c      	movs	r3, #12
 800209c:	602b      	str	r3, [r5, #0]
 800209e:	e7d6      	b.n	800204e <_free_r+0x22>
 80020a0:	6820      	ldr	r0, [r4, #0]
 80020a2:	1821      	adds	r1, r4, r0
 80020a4:	428b      	cmp	r3, r1
 80020a6:	bf01      	itttt	eq
 80020a8:	6819      	ldreq	r1, [r3, #0]
 80020aa:	685b      	ldreq	r3, [r3, #4]
 80020ac:	1809      	addeq	r1, r1, r0
 80020ae:	6021      	streq	r1, [r4, #0]
 80020b0:	6063      	str	r3, [r4, #4]
 80020b2:	6054      	str	r4, [r2, #4]
 80020b4:	e7cb      	b.n	800204e <_free_r+0x22>
 80020b6:	bd38      	pop	{r3, r4, r5, pc}
 80020b8:	20000230 	.word	0x20000230

080020bc <sbrk_aligned>:
 80020bc:	b570      	push	{r4, r5, r6, lr}
 80020be:	4e0e      	ldr	r6, [pc, #56]	; (80020f8 <sbrk_aligned+0x3c>)
 80020c0:	460c      	mov	r4, r1
 80020c2:	6831      	ldr	r1, [r6, #0]
 80020c4:	4605      	mov	r5, r0
 80020c6:	b911      	cbnz	r1, 80020ce <sbrk_aligned+0x12>
 80020c8:	f000 f8bc 	bl	8002244 <_sbrk_r>
 80020cc:	6030      	str	r0, [r6, #0]
 80020ce:	4621      	mov	r1, r4
 80020d0:	4628      	mov	r0, r5
 80020d2:	f000 f8b7 	bl	8002244 <_sbrk_r>
 80020d6:	1c43      	adds	r3, r0, #1
 80020d8:	d00a      	beq.n	80020f0 <sbrk_aligned+0x34>
 80020da:	1cc4      	adds	r4, r0, #3
 80020dc:	f024 0403 	bic.w	r4, r4, #3
 80020e0:	42a0      	cmp	r0, r4
 80020e2:	d007      	beq.n	80020f4 <sbrk_aligned+0x38>
 80020e4:	1a21      	subs	r1, r4, r0
 80020e6:	4628      	mov	r0, r5
 80020e8:	f000 f8ac 	bl	8002244 <_sbrk_r>
 80020ec:	3001      	adds	r0, #1
 80020ee:	d101      	bne.n	80020f4 <sbrk_aligned+0x38>
 80020f0:	f04f 34ff 	mov.w	r4, #4294967295
 80020f4:	4620      	mov	r0, r4
 80020f6:	bd70      	pop	{r4, r5, r6, pc}
 80020f8:	20000234 	.word	0x20000234

080020fc <_malloc_r>:
 80020fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002100:	1ccd      	adds	r5, r1, #3
 8002102:	f025 0503 	bic.w	r5, r5, #3
 8002106:	3508      	adds	r5, #8
 8002108:	2d0c      	cmp	r5, #12
 800210a:	bf38      	it	cc
 800210c:	250c      	movcc	r5, #12
 800210e:	2d00      	cmp	r5, #0
 8002110:	4607      	mov	r7, r0
 8002112:	db01      	blt.n	8002118 <_malloc_r+0x1c>
 8002114:	42a9      	cmp	r1, r5
 8002116:	d905      	bls.n	8002124 <_malloc_r+0x28>
 8002118:	230c      	movs	r3, #12
 800211a:	2600      	movs	r6, #0
 800211c:	603b      	str	r3, [r7, #0]
 800211e:	4630      	mov	r0, r6
 8002120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002124:	4e2e      	ldr	r6, [pc, #184]	; (80021e0 <_malloc_r+0xe4>)
 8002126:	f000 f89d 	bl	8002264 <__malloc_lock>
 800212a:	6833      	ldr	r3, [r6, #0]
 800212c:	461c      	mov	r4, r3
 800212e:	bb34      	cbnz	r4, 800217e <_malloc_r+0x82>
 8002130:	4629      	mov	r1, r5
 8002132:	4638      	mov	r0, r7
 8002134:	f7ff ffc2 	bl	80020bc <sbrk_aligned>
 8002138:	1c43      	adds	r3, r0, #1
 800213a:	4604      	mov	r4, r0
 800213c:	d14d      	bne.n	80021da <_malloc_r+0xde>
 800213e:	6834      	ldr	r4, [r6, #0]
 8002140:	4626      	mov	r6, r4
 8002142:	2e00      	cmp	r6, #0
 8002144:	d140      	bne.n	80021c8 <_malloc_r+0xcc>
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	4631      	mov	r1, r6
 800214a:	4638      	mov	r0, r7
 800214c:	eb04 0803 	add.w	r8, r4, r3
 8002150:	f000 f878 	bl	8002244 <_sbrk_r>
 8002154:	4580      	cmp	r8, r0
 8002156:	d13a      	bne.n	80021ce <_malloc_r+0xd2>
 8002158:	6821      	ldr	r1, [r4, #0]
 800215a:	3503      	adds	r5, #3
 800215c:	1a6d      	subs	r5, r5, r1
 800215e:	f025 0503 	bic.w	r5, r5, #3
 8002162:	3508      	adds	r5, #8
 8002164:	2d0c      	cmp	r5, #12
 8002166:	bf38      	it	cc
 8002168:	250c      	movcc	r5, #12
 800216a:	4638      	mov	r0, r7
 800216c:	4629      	mov	r1, r5
 800216e:	f7ff ffa5 	bl	80020bc <sbrk_aligned>
 8002172:	3001      	adds	r0, #1
 8002174:	d02b      	beq.n	80021ce <_malloc_r+0xd2>
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	442b      	add	r3, r5
 800217a:	6023      	str	r3, [r4, #0]
 800217c:	e00e      	b.n	800219c <_malloc_r+0xa0>
 800217e:	6822      	ldr	r2, [r4, #0]
 8002180:	1b52      	subs	r2, r2, r5
 8002182:	d41e      	bmi.n	80021c2 <_malloc_r+0xc6>
 8002184:	2a0b      	cmp	r2, #11
 8002186:	d916      	bls.n	80021b6 <_malloc_r+0xba>
 8002188:	1961      	adds	r1, r4, r5
 800218a:	42a3      	cmp	r3, r4
 800218c:	6025      	str	r5, [r4, #0]
 800218e:	bf18      	it	ne
 8002190:	6059      	strne	r1, [r3, #4]
 8002192:	6863      	ldr	r3, [r4, #4]
 8002194:	bf08      	it	eq
 8002196:	6031      	streq	r1, [r6, #0]
 8002198:	5162      	str	r2, [r4, r5]
 800219a:	604b      	str	r3, [r1, #4]
 800219c:	4638      	mov	r0, r7
 800219e:	f104 060b 	add.w	r6, r4, #11
 80021a2:	f000 f865 	bl	8002270 <__malloc_unlock>
 80021a6:	f026 0607 	bic.w	r6, r6, #7
 80021aa:	1d23      	adds	r3, r4, #4
 80021ac:	1af2      	subs	r2, r6, r3
 80021ae:	d0b6      	beq.n	800211e <_malloc_r+0x22>
 80021b0:	1b9b      	subs	r3, r3, r6
 80021b2:	50a3      	str	r3, [r4, r2]
 80021b4:	e7b3      	b.n	800211e <_malloc_r+0x22>
 80021b6:	6862      	ldr	r2, [r4, #4]
 80021b8:	42a3      	cmp	r3, r4
 80021ba:	bf0c      	ite	eq
 80021bc:	6032      	streq	r2, [r6, #0]
 80021be:	605a      	strne	r2, [r3, #4]
 80021c0:	e7ec      	b.n	800219c <_malloc_r+0xa0>
 80021c2:	4623      	mov	r3, r4
 80021c4:	6864      	ldr	r4, [r4, #4]
 80021c6:	e7b2      	b.n	800212e <_malloc_r+0x32>
 80021c8:	4634      	mov	r4, r6
 80021ca:	6876      	ldr	r6, [r6, #4]
 80021cc:	e7b9      	b.n	8002142 <_malloc_r+0x46>
 80021ce:	230c      	movs	r3, #12
 80021d0:	4638      	mov	r0, r7
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	f000 f84c 	bl	8002270 <__malloc_unlock>
 80021d8:	e7a1      	b.n	800211e <_malloc_r+0x22>
 80021da:	6025      	str	r5, [r4, #0]
 80021dc:	e7de      	b.n	800219c <_malloc_r+0xa0>
 80021de:	bf00      	nop
 80021e0:	20000230 	.word	0x20000230

080021e4 <_realloc_r>:
 80021e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021e8:	4680      	mov	r8, r0
 80021ea:	4614      	mov	r4, r2
 80021ec:	460e      	mov	r6, r1
 80021ee:	b921      	cbnz	r1, 80021fa <_realloc_r+0x16>
 80021f0:	4611      	mov	r1, r2
 80021f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021f6:	f7ff bf81 	b.w	80020fc <_malloc_r>
 80021fa:	b92a      	cbnz	r2, 8002208 <_realloc_r+0x24>
 80021fc:	f7ff ff16 	bl	800202c <_free_r>
 8002200:	4625      	mov	r5, r4
 8002202:	4628      	mov	r0, r5
 8002204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002208:	f000 f838 	bl	800227c <_malloc_usable_size_r>
 800220c:	4284      	cmp	r4, r0
 800220e:	4607      	mov	r7, r0
 8002210:	d802      	bhi.n	8002218 <_realloc_r+0x34>
 8002212:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002216:	d812      	bhi.n	800223e <_realloc_r+0x5a>
 8002218:	4621      	mov	r1, r4
 800221a:	4640      	mov	r0, r8
 800221c:	f7ff ff6e 	bl	80020fc <_malloc_r>
 8002220:	4605      	mov	r5, r0
 8002222:	2800      	cmp	r0, #0
 8002224:	d0ed      	beq.n	8002202 <_realloc_r+0x1e>
 8002226:	42bc      	cmp	r4, r7
 8002228:	4622      	mov	r2, r4
 800222a:	4631      	mov	r1, r6
 800222c:	bf28      	it	cs
 800222e:	463a      	movcs	r2, r7
 8002230:	f7ff fbac 	bl	800198c <memcpy>
 8002234:	4631      	mov	r1, r6
 8002236:	4640      	mov	r0, r8
 8002238:	f7ff fef8 	bl	800202c <_free_r>
 800223c:	e7e1      	b.n	8002202 <_realloc_r+0x1e>
 800223e:	4635      	mov	r5, r6
 8002240:	e7df      	b.n	8002202 <_realloc_r+0x1e>
	...

08002244 <_sbrk_r>:
 8002244:	b538      	push	{r3, r4, r5, lr}
 8002246:	2300      	movs	r3, #0
 8002248:	4d05      	ldr	r5, [pc, #20]	; (8002260 <_sbrk_r+0x1c>)
 800224a:	4604      	mov	r4, r0
 800224c:	4608      	mov	r0, r1
 800224e:	602b      	str	r3, [r5, #0]
 8002250:	f7fe f962 	bl	8000518 <_sbrk>
 8002254:	1c43      	adds	r3, r0, #1
 8002256:	d102      	bne.n	800225e <_sbrk_r+0x1a>
 8002258:	682b      	ldr	r3, [r5, #0]
 800225a:	b103      	cbz	r3, 800225e <_sbrk_r+0x1a>
 800225c:	6023      	str	r3, [r4, #0]
 800225e:	bd38      	pop	{r3, r4, r5, pc}
 8002260:	20000238 	.word	0x20000238

08002264 <__malloc_lock>:
 8002264:	4801      	ldr	r0, [pc, #4]	; (800226c <__malloc_lock+0x8>)
 8002266:	f000 b811 	b.w	800228c <__retarget_lock_acquire_recursive>
 800226a:	bf00      	nop
 800226c:	2000023c 	.word	0x2000023c

08002270 <__malloc_unlock>:
 8002270:	4801      	ldr	r0, [pc, #4]	; (8002278 <__malloc_unlock+0x8>)
 8002272:	f000 b80c 	b.w	800228e <__retarget_lock_release_recursive>
 8002276:	bf00      	nop
 8002278:	2000023c 	.word	0x2000023c

0800227c <_malloc_usable_size_r>:
 800227c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002280:	1f18      	subs	r0, r3, #4
 8002282:	2b00      	cmp	r3, #0
 8002284:	bfbc      	itt	lt
 8002286:	580b      	ldrlt	r3, [r1, r0]
 8002288:	18c0      	addlt	r0, r0, r3
 800228a:	4770      	bx	lr

0800228c <__retarget_lock_acquire_recursive>:
 800228c:	4770      	bx	lr

0800228e <__retarget_lock_release_recursive>:
 800228e:	4770      	bx	lr

08002290 <_init>:
 8002290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002292:	bf00      	nop
 8002294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002296:	bc08      	pop	{r3}
 8002298:	469e      	mov	lr, r3
 800229a:	4770      	bx	lr

0800229c <_fini>:
 800229c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229e:	bf00      	nop
 80022a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022a2:	bc08      	pop	{r3}
 80022a4:	469e      	mov	lr, r3
 80022a6:	4770      	bx	lr
